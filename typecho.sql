-- MySQL dump 10.13  Distrib 5.5.48, for Linux (x86_64)
--
-- Host: localhost    Database: www
-- ------------------------------------------------------
-- Server version	5.5.48-log

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `www_comments`
--

DROP TABLE IF EXISTS `www_comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `www_comments` (
  `coid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `cid` int(10) unsigned DEFAULT '0',
  `created` int(10) unsigned DEFAULT '0',
  `author` varchar(200) DEFAULT NULL,
  `authorId` int(10) unsigned DEFAULT '0',
  `ownerId` int(10) unsigned DEFAULT '0',
  `mail` varchar(200) DEFAULT NULL,
  `url` varchar(200) DEFAULT NULL,
  `ip` varchar(64) DEFAULT NULL,
  `agent` varchar(200) DEFAULT NULL,
  `text` text,
  `type` varchar(16) DEFAULT 'comment',
  `status` varchar(16) DEFAULT 'approved',
  `parent` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`coid`),
  KEY `cid` (`cid`),
  KEY `created` (`created`)
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `www_comments`
--

LOCK TABLES `www_comments` WRITE;
/*!40000 ALTER TABLE `www_comments` DISABLE KEYS */;
/*!40000 ALTER TABLE `www_comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `www_contents`
--

DROP TABLE IF EXISTS `www_contents`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `www_contents` (
  `cid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(200) DEFAULT NULL,
  `slug` varchar(200) DEFAULT NULL,
  `created` int(10) unsigned DEFAULT '0',
  `modified` int(10) unsigned DEFAULT '0',
  `text` text,
  `order` int(10) unsigned DEFAULT '0',
  `authorId` int(10) unsigned DEFAULT '0',
  `template` varchar(32) DEFAULT NULL,
  `type` varchar(16) DEFAULT 'post',
  `status` varchar(16) DEFAULT 'publish',
  `password` varchar(32) DEFAULT NULL,
  `commentsNum` int(10) unsigned DEFAULT '0',
  `allowComment` char(1) DEFAULT '0',
  `allowPing` char(1) DEFAULT '0',
  `allowFeed` char(1) DEFAULT '0',
  `parent` int(10) unsigned DEFAULT '0',
  `views` int(10) DEFAULT '0',
  PRIMARY KEY (`cid`),
  UNIQUE KEY `slug` (`slug`),
  KEY `created` (`created`)
) ENGINE=MyISAM AUTO_INCREMENT=87 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `www_contents`
--

LOCK TABLES `www_contents` WRITE;
/*!40000 ALTER TABLE `www_contents` DISABLE KEYS */;
INSERT INTO `www_contents` VALUES (4,'关于','about',1482893880,1514733437,'<!--markdown-->## 联系QQ，957766762\r\n## 精通PHP，熟悉PHP框架，系统。\r\n## 春风得意会有时，直长翅膀飞上天。\r\n\r\n#### 一些网站\r\n* [github 地址][1]\r\n* [码云地址][2]\r\n* [开源中国地址][3]\r\n\r\n\r\n#### 最近动态： \r\n* [github 静态网站][4]\r\n* [Laravel 入门教程][5]\r\n* [shopnc 网站][6]\r\n\r\n\r\n#### 如果觉得我的文章对您有用，请随意打赏：\r\n![打赏][7]\r\n\r\n\r\n  [1]: https://github.com/gitslagga\r\n  [2]: https://git.oschina.net/slagga\r\n  [3]: https://my.oschina.net/slagga\r\n  [4]: https://gitslagga.github.io\r\n  [5]: http://laravel.slagga.top/\r\n  [6]: http://shopnc.slagga.top/\r\n  [7]: https://gitslagga.github.io/weixin_small.jpg',2,1,NULL,'page','publish',NULL,0,'1','1','1',0,534),(7,'链接','link',1482896100,1492134696,'<!--markdown-->最近使用的链接\r\n\r\n[PHP  官方开发组第一次 鸟哥][1]\r\n[JAVA 小文章][2]\r\n[JAVA 课件　小项目][3]\r\n\r\n\r\n\r\n<hr style=\"width:100%;\"/>\r\n\r\n以前使用过的链接\r\n[lnmp  Ubuntu Nginx MySQL PHP][4]\r\n[搭建UbuntuU盘启动系统，安装时输入 live][5]		\r\n[APT安装LNMP 建议安装][6]	\r\n[ubuntu终端连接远程计算机][7]\r\n[Ubuntu PHP 工作环境][8]\r\n[nginx 域名重定向][9]\r\n[Let’s Encrypt免费的https证书][10]\r\n[WebBench压力测试][11]\r\n[阿铭Linux2手册][12]\r\n[APP打包][13]\r\n[生活百态周冲][14]\r\n\r\n\r\n[内存溢出和内存泄漏的区别][15]\r\n[webp 更小的图片][16]\r\n[编程之美][17]\r\n[提高PHP代码质量的36个技巧][18]	\r\n[Ueditor Toolbars 配置教程][19]\r\n[YII 开源项目。。。][20]\r\n[typecho 验证码	][21]\r\n[没那么简单博客][22]\r\n[php 获取变量内存地址][23]\r\n\r\n\r\n  [1]: http://www.laruence.com/\r\n  [2]: http://www.cnblogs.com/qifengshi/category/819939.html\r\n  [3]: http://linux.linuxidc.com/\r\n  [4]: https://lnmp.org/faq/addons.html\r\n  [5]: http://jingyan.baidu.com/article/19020a0a396b6e529d2842cb.html\r\n  [6]: https://www.zhihu.com/question/46241604\r\n  [7]: http://www.cnblogs.com/sin90lzc/archive/2012/06/23/2559516.html\r\n  [8]: http://www.cnblogs.com/fishyxj/p/5750754.html\r\n  [9]: http://blog.csdn.net/sunboy_2050/article/details/51857985\r\n  [10]: http://grayson.org.cn/blog/2016/08/11/letsencrypt/\r\n  [11]: http://www.linuxidc.com/Linux/2014-10/107611.htm\r\n  [12]: http://www.apelearn.com/study_v2/chapter10.html\r\n  [13]: http://www.yundabao.cn/\r\n  [14]: https://baike.baidu.com/tashuo/authorcenter?authorId=0705d7139a9a0dfd71a20727\r\n  [15]: http://blog.csdn.net/buutterfly/article/details/6617375\r\n  [16]: http://www.jianshu.com/p/29c15c80c63c\r\n  [17]: http://download.csdn.net/detail/panhgshine/5969261\r\n  [18]: http://www.zkbhj.com/articles/?id=3864\r\n  [19]: http://blog.csdn.net/daleiwang/article/details/25001431\r\n  [20]: https://github.com/forecho/awesome-yii2\r\n  [21]: https://segmentfault.com/a/1190000002621089\r\n  [22]: http://nsimple.top/\r\n  [23]: https://zhidao.baidu.com/question/1498408109618165899.html',1,1,NULL,'page','publish',NULL,0,'1','1','1',0,403),(14,'HTML5 APP----2014年H5没火，why？2016年H5能火，why？','html5-app-why',1482896880,1483430622,'<!--markdown-->HTML5做跨平台的APP，在大多数人的脑子里没有什么好感，我身边的朋友也这么说。Anyway，我用完以后得出这样的结论：HTML5跨平台APP开发，在2015年以后会越来越火。\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n    在2014年以前，HTML5的性能和能力都不够充足。特别是性能，因为Android4.4以下版本不能支持webGL技术，所以大部分低端Android手机无法流畅运行手机APP。DCloud公司利用一款增强版的手机浏览器缓解了这个问题。同时，随着时代的进步，Android4.4以下版本将逐渐减少。\r\n\r\n1 2014年H5没火，WHY\r\n    \r\n    HTML5开发的APP在安卓4.4以下版本无法流畅运行，带来很差的用户体验。在目前iOS版本的手机则不存在这种问题。\r\n   究其原因，是Android4.4以下版本内置的webview版本太低，不支持webGL加速技术。近几年，HTML5开发APP无法普及，因为Android4.4以下版本市场占有率高企。但是，从2013开始，Android4.4以下版本正在逐步减少，这将对使用HTML5开发APP形成有利条件。\r\n![][1]\r\n\r\n\r\n\r\n    2015年11月，Android手机版本分布情况，数据来源：友盟指数\r\n    上图是Android手机在2015年11月份的版本分布，目前，在4.4以上（含4.4）版本已经有57.47%的占有率，而且，5.0以上版本的占有率（目前已有8.64%）有快速增加的趋势。未来，4.4以上（含4.4）版本将是Android市场的主流版本，这一事件正在发生。\r\n![][2]\r\n\r\n\r\n![图  2014-2015年，Android手机部分版本变换趋势][3]\r\n\r\n\r\n    上图是2014年-2015年间，Android手机部分版本的变化趋势。可以看出：4.4.4和4.4.2版本在快速扩张以后，目前增速放缓；4.4以下版本仍继续减少，并无停止迹象。同时，“其他”一类的占有率正在提高，并已超过4.4.2版本的占有率，有望赶上4.4.4版本的占有率。在“其他”的增长过程中，包含了4.4.4以上版本的快速增加，并且以5.0以上版本的持续增加为主。\r\n\r\n2 2015年H5会火，WHY\r\n\r\n      分析完Android版本分布，我认为：HTML5开发APP的前景十分好，以后Html5 APP将能自己适应目前的市场，不再有性能问题。\r\n    同时，对于iOS操作系统及iPhone手机，不必担心性能问题，iOS端本身对HTML5的支持就很好。\r\n    下图是2015年iOS手机的版本分布结果：\r\n![][4]\r\n\r\n\r\n3 先发制人\r\n\r\n    HTML5跨平台APP越来越火，工具也越来越多。我推荐一个开发平台（一款工具）----DCloud。\r\n![][5]\r\n\r\n\r\n  [1]: http://img.blog.csdn.net/20160225102439481?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\r\n  [2]: http://img.blog.csdn.net/20160225102910905?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\r\n  [3]: http://img.blog.csdn.net/20160225102951390?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\r\n  [4]: http://img.blog.csdn.net/20160225103827230?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\r\n  [5]: http://img.blog.csdn.net/20160225104304002?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\r\n      DCloud公司四款产品——HBuilder、HTML5+ Runtime、MUI、流应用。\r\n\r\n    HBuilder是一款前端开发工具，里面内置大量快捷键，飞速编码，一款不错的极客工具。\r\n    HTML5+ Runtime是一款手机浏览器，是依照DCloud公司的HTML5+标准实现的增强版浏览器，用于跨平台开发。该浏览器可以解析HTM5+ 规范的代码，跑在iOS和Android端，这样一套代码就可以在两个平台上运行。\r\n    MUI是一款前端框架，专门用于制作手机APP，功能和Android原生UI库、iOS原生UI库、jQuery Mobile、Zepto等框架类似。这是DCloud公司出品，用于和HTML5+ Runtime配套使用，可以使HTML5+ APP流畅跑在IOS和Android端手机上。MUI还是一款高大上的UI框架，其风格是模仿IOS 7界面风格的产品。\r\n    流应用是一种发行APP的方式，能让用户秒下、秒开手机APP，同时可以生产6个渠道的包【iOS ipa、Android apk、360流应用市场、百度直达号、H5浏览器、微信APP】。\r\n\r\n\r\n\r\n参考资料：HTML5 APP----DCloud产品分析及介绍',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,189),(27,'TCP、UDP和HTTP详解','tcp-udp-http',1482910860,1483430460,'<!--markdown-->先来一个讲TCP、UDP和HTTP关系的\r\nhttp:是用于www浏览的一个协议。\r\ntcp：是机器之间建立连接用的到的一个协议。\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n1、TCP/IP是个协议组，可分为三个层次：网络层、传输层和应用层。\r\n在网络层有IP协议、ICMP协议、ARP协议、RARP协议和BOOTP协议。\r\n在传输层中有TCP协议与UDP协议。\r\n在应用层有FTP、HTTP、TELNET、SMTP、DNS等协议。\r\n因此，HTTP本身就是一个协议，是从Web服务器传输超文本到本地浏览器的传送协议。\r\n2、HTTP协议是建立在请求/响应模型上的。首先由客户建立一条与服务器的TCP链接，并发送一个请求到服务器，请求中包含请求方法、URI、协 议版本以及相关的MIME样式的消息。服务器响应一个状态行，包含消息的协议版本、一个成功和失败码以及相关的MIME式样的消息。\r\nHTTP/1.0为每一次HTTP的请求/响应建立一条新的TCP链接，因此一个包含HTML内容和图片的页面将需要建立多次的短期的TCP链接。一次TCP链接的建立将需要3次握手。\r\n另外，为了获得适当的传输速度，则需要TCP花费额外的回路链接时间（RTT）。每一次链接的建立需要这种经常性的开销，而其并不带有实际有用的数据，只 是保证链接的可靠性，因此HTTP/1.1提出了可持续链接的实现方法。HTTP/1.1将只建立一次TCP的链接而重复地使用它传输一系列的请求/响应 消息，因此减少了链接建立的次数和经常性的链接开销。\r\n3、结论：虽然HTTP本身是一个协议，但其最终还是基于TCP的。不过，目前，有人正在研究基于TCP+UDP混合的HTTP协议。\r\n具体介绍\r\nIP （网际协议）\r\n在网络通信中，网络组件的寻址对信息的路由选择和传输来说是相当关键的。相同网络中的两台机器间的消息传输有各自的技术协定。LAN 是通过提供6字节的唯一标识符（“MAC”地址）在机器间发送消息的。SNA 网络中的每台机器都有一个逻辑单元及与其相应的网络地址。DECNET、AppleTalk 和 Novell IPX 均有一个用来分配编号到各个本地网和工作站的配置。\r\nHTTP是超文本传输协议，是客户端浏览器或其他程序与Web服务器之间的 应用层通信协议。在Internet上的Web服务器上存放的都是超文本信息， 客户机需要通过HTTP协议传输所要访问的超文本信息。HTTP包含命令和传输信息，不仅可用于Web访问，也可以用于其他因特网/内联网应用系统之间的 通信，从而实现各类应用资源超媒体访问的集成\r\nTCP （传输控制协议）\r\n通过序列化应答和必要时重发数据包，TCP 为应用程序提供了可靠的传输流和虚拟连接服务。TCP 主要提供数据流转送，可靠传输，有效流控制，全双工操作和多路传输技术。可查阅 TCP 部分获取更多详细资料。\r\n至于HTTP协议,它是TCP协议族中的一种。使用TCP80端口\r\nHTTP是应用层协议，TCP是传输层协议！\r\n数据包在网络传输过程中，HTTP被封装在TCP包内！！\r\n1. TCP/UDP\r\n面向连接的TCP\r\n“面向连接”就是在正式通信前必须要与对方建立起连接。比如你给别人打电话，必须等线路接通了、对方拿起话筒才能相互通话。\r\nTCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能 建立起来，其中的过程非常复杂，我们这里只做简单、形象的介绍，你只要做到能够理解这个过程即可。\r\n我们来看看这三次对话的简单过程：\r\n1. 主机A向主机B发出连 接请求数据包：“我想给你发数据，可以吗？”，这是第一次对话；\r\n2. 主机B向主机A发送同意连接和要求同步（同步就是两台主机一个在发送，一个在接收，协调工 作）的数据包：“可以，你什么时候发？”，这是第二次对话；\r\n3. 主机A再发出一个数据包确认主机B的要求同步：“我现在就发，你接着吧！”，这是第三次对话。\r\n三次“对话”的目的是使数据包的发送和接收同步，经过三次“对话”之后，主机A才向主机B正式发送数据。\r\nTCP协议能为应用程序提供可靠的通信连接，使一台计算机发出的字节流无差错地发往网络上的其他计算机，对可靠性要求高的数据通信系统往往使用TCP协议传输数据。\r\n我 们来做一个实验，用计算机A（安装Windows 2000 Server操作系统）从“网上邻居”上的一台计算机B拷贝大小为8,644,608字节的文件，通过状态栏右下角网卡的发送和接收指标就会发现：虽然是 数据流是由计算机B流向计算机A，但是计算机A仍发送了3,456个数据包，如图2所示。这些数据包是怎样产生的呢？因为文件传输时使用了TCP/IP协 议，更确切地说是使用了面向连接的TCP协议，计算机A接收数据包的时候，要向计算机B回发数据包，所以也产生了一些通信量。\r\n如果事先用网络监视器监视网络流量，就会发现由此产生的数据流量是9,478,819字节，比文件大小多出10.96%（如图3所示），原因不仅在于数据包和帧本身占用了一些空间，而且也在于TCP协议面向连接的特性导致了一些额外的通信量的产生。\r\n面向非连接的UDP协议\r\n“面向非连接”就是在正式通信前不必与对方先建立连接，不管对方状态就直接发送。这与现在风行的手机短信非常相似：你在发短信的时候，只需要输入对方手机号就OK了。\r\nUDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！\r\nUDP 适用于一次只传送少量数据、对可靠性要求不高的应用环境。比如，我们经常使用“ping”命令来测试两台主机之间TCP/IP通信是否正常，其实 “ping”命令的原理就是向对方主机发送UDP数据包，然后对方主机确认收到数据包，如果数据包是否到达的消息及时反馈回来，那么网络就是通的。例如， 在默认状态下，一次“ping”操作发送4个数据包（如图2所示）。大家可以看到，发送的数据包数量是4包，收到的也是4包（因为对方主机收到后会发回一 个确认收到的数据包）。这充分说明了UDP协议是面向非连接的协议，没有建立连接的过程。正因为UDP协议没有连接的过程，所以它的通信效果高；但也正因 为如此，它的可靠性不如TCP协议高。QQ就使用UDP发消息，因此有时会出现收不到消息的情况。\r\n附表：tcp协议和udp协议的差别\r\ntcp udp\r\n是否连接 面向连接 面向非连接\r\n传输可靠性 可靠的 不可靠的\r\n应用场合 传输大量的数据 少量数据\r\n速度 慢 快\r\nTCP协议和UDP协议各有所长、各有所短，适用于不同要求的通信环境。TCP协议和UDP协议之间的差别如附表所示。',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,106),(22,'全栈工程师和架构师的区别','full-stack-arch',1482910500,1483430492,'<!--markdown-->全栈工程师和构架师并不存在高下之分，分工不同而，只不过成为构架师所需要掌握的知识更特殊，而且也更依赖经验。全栈工程师更多关注功能实现，构架师更关注系统性能。\r\n\r\n全栈工程师主要负责应用开发，对前端后端技术都能熟练使用，更关注应用开发本身，以做新功能为主。\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n但在大型应用中，除了功能，性能也变得重要，这时候就需要构架师了。构架师考虑的是技术的选型，系统模块之间的连接方式，系统可能的瓶颈，然后还有负载均衡和缓存之类的支持系统。\r\n\r\n对于小型系统，只要实现功能即可，性能可以暂时放在一边，全栈工程师最适合。随着系统的更新升级，构架也不断演进，许多以前不会出现的问题渐渐出现，能对这个过程有清晰认识的人，就是架构师\r\n\r\n总结，就像laravel和yii一样，一个是全栈框架一个是组件框架，全栈工程师和全栈框架更关注功能的实现，而框架师和组件框架更管组系统性能！',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,89),(23,'Ubuntu 使用经验','ubuntu-use',1482910620,1484207393,'<!--markdown-->这是我在Ubuntu 上写的第一篇博客，折腾两三个星期的时间，总结出来一点经验，喜欢的朋友支持下。\r\n\r\n \r\n\r\n首先使用软碟通刻录Ubuntu U盘启动盘，\r\n\r\nhttp://jingyan.baidu.com/article/19020a0a396b6e529d2842cb.html\r\n\r\n \r\n\r\n\r\n<!--more-->\r\n\r\n\r\n刻录成功，插入U 盘，进入BIOS ，选择U 盘启动，如果启动出现问题就输入live，\r\n\r\n紧接着进入Ubuntu 安装界面 具体安装双系统还是单系统看自己选择，\r\n\r\nhttp://www.linuxidc.com/Linux/2016-04/130520.htm\r\n\r\n \r\n\r\n安装成功，紧接着快速安装PHP  环境，\r\n\r\nhttps://www.zhihu.com/question/46241604/answer/100788789\r\n\r\n \r\n\r\nMySql 开发可以使用Navicate ，Mysqldump，PHPMyadmin ，Mysql  命令行也可以，如果PHPMyadmin 无法使用你可以 Sudo apt install php7.0-mbstring\r\n\r\nPHP 开发可以使用Netbeans for PHP , PHPStorm , ZendStudio , Sublime , 自己定制的VIM  IDE 也可以，如果IDE  没有权限编辑文集是因为Nginx 默认用户是 www-data , 当前用户是你登录的用户，所以没有权限你可以  Sudo chown -R your-user:your-group www  或者  Chmod -R 777 www  。\r\n\r\n线上环境时我都是让登录名字跟随nginx 用户的组 然后修改771，就可以更改项目文件啦， Ububtu 更改所在组也不能修改项目 ， 所以直接把根目录权限修改成登录用户的名字和组或者修改成 777。\r\n\r\n \r\n\r\n本地项目开发好就可以使用Ubuntu 上的连接到服务器 sftp://user@www.example.com:22222/home/wwwroot 像访问本地文件一样访问服务器，当然你输入正确的用户名和密码才能上传和下载文件。\r\n\r\n成功链接服务器后，你可以右键选择在远程终端打开，就可以在远程服务器上使用shell 命令啦。\r\n\r\n \r\n\r\nUbuntu 16.04 没有声音如何修复：\r\n\r\nhttps://lms.im/os/no-sound-solution-ubuntu-16-04.html\r\n\r\nUbuntu 16.04 中Sublime 无法输入中文如何修复：\r\n\r\nhttp://www.jianshu.com/p/bf05fb3a4709\r\n\r\n \r\n\r\n附录：虽然我为系统，环境，工具付出很多心血，但老板要的是快速，安全，稳定，专业的项目，而不是各种各种的酷工具，不说啦，鲁代码去啦。',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,119),(25,'SQL 语句的正确姿势','mysql-right',1482910680,1483430389,'<!--markdown--><?php\r\n \r\n//不安全的写法举例1\r\n $_GET[\'id\']=8;//希望得到的是正整数\r\n $data=M(\'Member\')->where(\'id=\'.$_GET[\'id\'])->find();\r\n $_GET[\'id\']=\'8 or status=1\';//隐患:构造畸形查询条件进行注入;\r\n           \r\n\r\n\r\n<!--more-->\r\n\r\n\r\n //安全的替换写法\r\n $data=M(\'Member\')->where(array(\'id\'=>$_GET[\'id\']))->find();//使用数组方式将自动使用框架自带的字段类型检测防止注入\r\n $data=M(\'Member\')->where(array(\'id\'=>(int)$_GET[\'id\']))->find();//类型约束\r\n $data=M(\'Member\')->where(\'id=\'.intval($_GET[\'id\']))->find();//类型转换\r\n $data=M(\'Member\')->where(array(\'id\'=>I(\'get.id\',\'\',\'intval\')))->find();//本人习惯写法\r\n $data=M(\'Member\')->where(array(\'id\'=>\':id\'))->bind(\':id\',I(\'get.id\'))->select();//PDO驱动可以使用参数绑定\r\n $data=M(\'Member\')->where(\"id=%d\",array($_GET[\'id\']))->find();//预处理机制\r\n           \r\n //不安全的写法举例2\r\n $_GET[\'id\']=8;//希望得到的是正整数\r\n $data=M()->query(\'SELECT * FROM `member` WHERE  id=\'.$_GET[\'id\']);//执行的SQL语句\r\n $_GET[\'id\']=\'8  UNION SELECT * FROM `member`\';;//隐患:构造畸形语句进行注入;',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,100),(26,'alpha、beta、rc各版本区别','open-source',1482910800,1483430522,'<!--markdown-->很多软件在正式发布前都会发布一些预览版或者测试版，一般都叫“beta版”或者 “rc版”，特别是开源软件，甚至有“alpha版”，下面来解释一下各个版本的意思。\r\n\r\n\r\n<!--more-->\r\n\r\n\r\nalpha版：内部测试版。α是希腊字母的第一个，表示最早的版本，一般用户不要下载这个版本，这个版本包含很多BUG，功能也不全，主要是给开发人员和 测试人员测试和找BUG用的。\r\n\r\nbeta版：公开测试版。β是希腊字母的第二个，顾名思义，这个版本比alpha版发布得晚一些，主要是给“部落”用户和忠实用户测试用的，该版本任然存 在很多BUG，但是相对alpha版要稳定一些。这个阶段版本的软件还会不断增加新功能。如果你是发烧友，可以下载这个版本。\r\n\r\nrc版：全写：Release Candidate（候选版本），该版本又较beta版更进一步了，该版本功能不再增加，和最终发布版功能一样。这个版本有点像最终发行版之前的一个类似 预览版，这个的发布就标明离最终发行版不远了。作为普通用户，如果你很急着用这个软件的话，也可以下载这个版本。\r\n\r\nstable版：稳定版。在开源软件中，都有stable版，这个就是开源软件的最终发行版，用户可以放心大胆的用了。\r\n\r\n\r\n商业软件\r\n\r\nRTM版：全称为Release to Manufacture。工厂版。改版程序已经固定，就差工厂包装、光盘印图案等工作了。\r\n\r\nOEM版：厂商定制版。\r\n\r\nEVAL版：评估版。就是有30或者60天等使用期限的版本。\r\n\r\nRTL版：Retail.(零售版)，这个版本就是真正发售的版本，有漂亮的包装、光盘、说明书等东西和高昂的价格。',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,113),(30,'不创新都得死','create-new',1482976980,1483430758,'<!--markdown-->一公司老总晚上酒驾，遇交警查车，弃车撒腿就跑，交警没追上。\r\n老总边跑边给老 婆打电话，叫她马上报警，说家里的车被盗。[呲牙][呲牙][呲牙]\r\n第二天，老总带着锦旗去交警队取车，握着交警同志的手说：神探啊，破案神速！\r\n交警：这都是我们应该做的，昨晚偷你车那小子跑太快，我们以为是酒驾，没想到是偷车的。    [呲牙][呲牙]\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n第三天，老总再次酒驾，发现前方不远在查车，心想不能故技重演，于是下车锁门，坐在马路边抽烟。\r\n警察赶到：你喝酒了？\r\n老总：是呀！\r\n警察：喝了还开车？\r\n老总：我没开，司机开的；    \r\n警察兜一圈不见司机：人呢？\r\n老总摇头：这混蛋跑了。\r\n见警察诧异，老总接着说：他一看到你们查车，气不打一处来，骂道：警察半夜三更不在家陪老婆孩子父母，又TM出来折腾了。\r\n我一听就狠训他，他不服，我趁着酒劲打了他一巴掌，没想到这混蛋把车一扔跑了，你说气人不气人！\r\n警察激动万分：这小子该揍，谢谢哥理解！没事哥，你上车，我送你回家。\r\n老总坐在副驾，望着交警默默感悟：这年头不创新只有死路一条！[呲牙][呲牙][呲牙]\r\n第四天，老总等四人都喝酒了……\r\n开到桥头，遇到查酒驾，四人傻眼了。\r\n老总让全车人下车，都在后面推车，推到警察跟前。\r\n警察问：咋滴啦？\r\n四人回答说：喝酒了，不能开车，家近，推回家去。\r\n警察一看后面的车一直堵，就问：谁喝的最少。\r\n老总说：我只喝了一瓶啤酒。\r\n警察说：一瓶啤酒没事，赶紧开走，别阻碍交通！[呲牙][呲牙]\r\n思路决定出路！太有才了。[呲牙][呲牙]\r\n\r\n推荐一篇心灵鸡汤，因为它符合我们的生活：[漂族与霾族][1]\r\n\r\n\r\n  [1]: https://www.douban.com/note/530800325/?start=100',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,130),(32,'PDO 简单应用','simple-pdo',1483083120,1483679134,'<!--markdown-->//PDO 链接数据库\r\ntry{\r\n    $pdo = new PDO(\'mysql:host=localhost;port=3306;dbname=currency\', \'root\', \'root\');\r\n}catch(PDOException $e){\r\n    echo \'数据库连接失败\'.$e->getMessage();\r\n}\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n/* //新增\r\n$sql=\"insert into buyer (username,password,email) values (\'ff\',\'123456\',\'admin@admin.com\')\";\r\n$res=$pdo->exec($sql);\r\necho \'影响行数：\'.$res;\r\n\r\n//修改\r\n$sql=\"update buyer set username=\'ff123\' where id>3\";\r\n$res=$pdo->exec($sql);\r\necho \'影响行数：\'.$res;\r\n\r\n//查询\r\n$sql=\"select * from buyer\";\r\n$res=$pdo->query($sql);\r\nforeach($res as $row){\r\n     echo $row[\'username\'].\'<br/>\';\r\n}\r\n\r\n//删除\r\n$sql=\"delete from buyer where id>5\"; */\r\n\r\n//占位符使用\r\n$id = 1;\r\n$b=$pdo->prepare(\"select * from yang_member where member_id = :id;\");\r\n$b->bindParam(\":id\",$id);\r\n$b->execute();\r\n	\r\n$b->fetchAll(PDO::FETCH_ASSOC);    //获取所有数据\r\n$b->fetch(PDO::FETCH_ASSOC);       //获取一条数据',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,124),(49,'shopnc 奇妙的邀请机制','shopnc-invite',1483668840,1483769334,'<!--markdown-->首先参考，[URL中“#” “？” &“”号的作用][10]\r\n\r\n\r\n  [10]: http://www.cnblogs.com/kaituorensheng/p/3776527.html\r\n\r\n场景  用户登录后邀请好友返利，被邀请用户打开好友发送的邀请链接访问，进行注册后给邀请好友增加积分，就算被邀请用户切换页面，网站也能判断邀请用户是谁。\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n(1)邀请链接 代码块：\r\n<php\r\n$member_id = base64_encode(intval($_SESSION[\'member_id\'])*1);\r\n?>\r\n<input type=\"text\" readonly value=\"<?php echo BASE_SITE_URL;?>/#V5<?php echo $member_id;?>\" >\r\n<br />\r\n\r\n(2)访问链接 代码块：\r\n由于切换页面也能找出邀请用户是谁，需要使用cookie，\r\nvar uid = window.location.href.split(\"#V5\");\r\nvar fragment = uid[1];\r\nif(fragment){\r\n	if (fragment.indexOf(\"V5\") == 0) {document.cookie=\'uid=0\';}\r\n		else {document.cookie=\'uid=\'+uid[1];}\r\n	}\r\n<br />\r\n\r\n这样就能实现随便切换页面只要不清空cookie的情况下找出邀请人，而且加密邀请人ID，保护用户信息安全。',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,137),(52,'PHP 简例 RestFul','2017-year',1486705800,1486707879,'<!--markdown-->新年新气象，2017 年 感悟很多，感慨很多，成熟点。\r\n这里简单介绍个接口实例。\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n以下代码是 RESTful 服务类 Site.php：\r\n实例\r\n\r\n    <?php\r\n    /* \r\n     * RESTful 服务类\r\n     */\r\n    Class Site {\r\n        \r\n        private $sites = array(\r\n            1 => \'TaoBao\',  \r\n            2 => \'Google\',  \r\n            3 => \'Runoob\',              \r\n            4 => \'Baidu\',              \r\n            5 => \'Weibo\',  \r\n            6 => \'Sina\'\r\n                \r\n        );\r\n            \r\n        \r\n        public function getAllSite(){\r\n            return $this->sites;\r\n        }\r\n        \r\n        public function getSite($id){\r\n            \r\n            $site = array($id => ($this->sites[$id]) ? $this->sites[$id] : $this->sites[1]);\r\n            return $site;\r\n        }    \r\n    }\r\n    ?>\r\n\r\nRESTful Services URI 映射\r\nRESTful Services URI 应该设置为一个直观简短的资源地址。Apache 服务器的 .htaccess 应设置好对应的 Rewrite 规则。\r\n本实例我们将使用两个 URI 规则：\r\n1、获取所有站点列表：\r\n\r\n    http://localhost/restexample/site/list/\r\n\r\n2、使用 id 获取指定的站点，以下 URI 为获取 id 为 3 的站点：\r\n\r\n    http://localhost/restexample/site/list/3/\r\n\r\n项目的 .htaccess 文件配置规则如下所示：\r\n\r\n    # 开启 rewrite 功能\r\n    Options +FollowSymlinks\r\n    RewriteEngine on\r\n\r\n    # 重写规则\r\n    RewriteRule ^site/list/$   RestController.php?view=all [nc,qsa]\r\n    RewriteRule ^site/list/([0-9]+)/$   RestController.php?view=single&id=$1 [nc,qsa]\r\n\r\nRESTful Web Service 控制器\r\n在 .htaccess 文件中，我们通过设置参数 \'view\' 来获取 RestController.php 文件中对应的请求，通过获取 \'view\' 不同的参数来分发到不同的方法上。RestController.php 文件代码如下：\r\n实例\r\n\r\n    <?php\r\n    require_once(\"SiteRestHandler.php\");\r\n            \r\n    $view = \"\";\r\n    if(isset($_GET[\"view\"]))\r\n        $view = $_GET[\"view\"];\r\n    /*\r\n     * RESTful service 控制器\r\n     * URL 映射\r\n    */\r\n    switch($view){\r\n     \r\n        case \"all\":\r\n            // 处理 REST Url /site/list/\r\n            $siteRestHandler = new SiteRestHandler();\r\n            $siteRestHandler->getAllSites();\r\n            break;\r\n            \r\n        case \"single\":\r\n            // 处理 REST Url /site/show/<id>/\r\n            $siteRestHandler = new SiteRestHandler();\r\n            $siteRestHandler->getSite($_GET[\"id\"]);\r\n            break;\r\n     \r\n        case \"\" :\r\n            //404 - not found;\r\n            break;\r\n    }\r\n    ?>\r\n\r\n简单的 RESTful 基础类\r\n以下提供了 RESTful 的一个基类，用于处理响应请求的 HTTP 状态码，SimpleRest.php 文件代码如下：\r\n实例\r\n\r\n    <?php \r\n    /*\r\n     * 一个简单的 RESTful web services 基类\r\n     * 我们可以基于这个类来扩展需求\r\n    */\r\n    class SimpleRest {\r\n        \r\n        private $httpVersion = \"HTTP/1.1\";\r\n     \r\n        public function setHttpHeaders($contentType, $statusCode){\r\n            \r\n            $statusMessage = $this -> getHttpStatusMessage($statusCode);\r\n            \r\n            header($this->httpVersion. \" \". $statusCode .\" \". $statusMessage);        \r\n            header(\"Content-Type:\". $contentType);\r\n        }\r\n        \r\n        public function getHttpStatusMessage($statusCode){\r\n            $httpStatus = array(\r\n                100 => \'Continue\',  \r\n                101 => \'Switching Protocols\',  \r\n                200 => \'OK\',\r\n                201 => \'Created\',  \r\n                202 => \'Accepted\',  \r\n                203 => \'Non-Authoritative Information\',  \r\n                204 => \'No Content\',  \r\n                205 => \'Reset Content\',  \r\n                206 => \'Partial Content\',  \r\n                300 => \'Multiple Choices\',  \r\n                301 => \'Moved Permanently\',  \r\n                302 => \'Found\',  \r\n                303 => \'See Other\',  \r\n                304 => \'Not Modified\',  \r\n                305 => \'Use Proxy\',  \r\n                306 => \'(Unused)\',  \r\n                307 => \'Temporary Redirect\',  \r\n                400 => \'Bad Request\',  \r\n                401 => \'Unauthorized\',  \r\n                402 => \'Payment Required\',  \r\n                403 => \'Forbidden\',  \r\n                404 => \'Not Found\',  \r\n                405 => \'Method Not Allowed\',  \r\n                406 => \'Not Acceptable\',  \r\n                407 => \'Proxy Authentication Required\',  \r\n                408 => \'Request Timeout\',  \r\n                409 => \'Conflict\',  \r\n                410 => \'Gone\',  \r\n                411 => \'Length Required\',  \r\n                412 => \'Precondition Failed\',  \r\n                413 => \'Request Entity Too Large\',  \r\n                414 => \'Request-URI Too Long\',  \r\n                415 => \'Unsupported Media Type\',  \r\n                416 => \'Requested Range Not Satisfiable\',  \r\n                417 => \'Expectation Failed\',  \r\n                500 => \'Internal Server Error\',  \r\n                501 => \'Not Implemented\',  \r\n                502 => \'Bad Gateway\',  \r\n                503 => \'Service Unavailable\',  \r\n                504 => \'Gateway Timeout\',  \r\n                505 => \'HTTP Version Not Supported\');\r\n            return ($httpStatus[$statusCode]) ? $httpStatus[$statusCode] : $status[500];\r\n        }\r\n    }\r\n    ?>\r\n\r\nRESTful Web Service 处理类\r\n以下是一个 RESTful Web Service 处理类 SiteRestHandler.php，继承了上面我们提供的 RESTful 基类，类中通过判断请求的参数来决定返回的 HTTP 状态码及数据格式，实例中我们提供了三种数据格式： \"application/json\" 、 \"application/xml\" 或 \"text/html\"：\r\nSiteRestHandler.php 文件代码如下:\r\n实例\r\n\r\n    <?php \r\n    require_once(\"SimpleRest.php\");\r\n    require_once(\"Site.php\");\r\n     \r\n    class SiteRestHandler extends SimpleRest {\r\n     \r\n        function getAllSites() {    \r\n     \r\n            $site = new Site();\r\n            $rawData = $site->getAllSite();\r\n     \r\n            if(empty($rawData)) {\r\n                $statusCode = 404;\r\n                $rawData = array(\'error\' => \'No sites found!\');        \r\n            } else {\r\n                $statusCode = 200;\r\n            }\r\n     \r\n            $requestContentType = $_SERVER[\'HTTP_ACCEPT\'];\r\n            $this ->setHttpHeaders($requestContentType, $statusCode);\r\n                    \r\n            if(strpos($requestContentType,\'application/json\') !== false){\r\n                $response = $this->encodeJson($rawData);\r\n                echo $response;\r\n            } else if(strpos($requestContentType,\'text/html\') !== false){\r\n                $response = $this->encodeHtml($rawData);\r\n                echo $response;\r\n            } else if(strpos($requestContentType,\'application/xml\') !== false){\r\n                $response = $this->encodeXml($rawData);\r\n                echo $response;\r\n            }\r\n        }\r\n        \r\n        public function encodeHtml($responseData) {\r\n        \r\n            $htmlResponse = \"<table border=\'1\'>\";\r\n            foreach($responseData as $key=>$value) {\r\n                    $htmlResponse .= \"<tr><td>\". $key. \"</td><td>\". $value. \"</td></tr>\";\r\n            }\r\n            $htmlResponse .= \"</table>\";\r\n            return $htmlResponse;        \r\n        }\r\n        \r\n        public function encodeJson($responseData) {\r\n            $jsonResponse = json_encode($responseData);\r\n            return $jsonResponse;        \r\n        }\r\n        \r\n        public function encodeXml($responseData) {\r\n            // 创建 SimpleXMLElement 对象\r\n            $xml = new SimpleXMLElement(\'<?xml version=\"1.0\"?><site></site>\');\r\n            foreach($responseData as $key=>$value) {\r\n                $xml->addChild($key, $value);\r\n            }\r\n            return $xml->asXML();\r\n        }\r\n        \r\n        public function getSite($id) {\r\n     \r\n            $site = new Site();\r\n            $rawData = $site->getSite($id);\r\n     \r\n            if(empty($rawData)) {\r\n                $statusCode = 404;\r\n                $rawData = array(\'error\' => \'No sites found!\');        \r\n            } else {\r\n                $statusCode = 200;\r\n            }\r\n     \r\n            $requestContentType = $_SERVER[\'HTTP_ACCEPT\'];\r\n            $this ->setHttpHeaders($requestContentType, $statusCode);\r\n                    \r\n            if(strpos($requestContentType,\'application/json\') !== false){\r\n                $response = $this->encodeJson($rawData);\r\n                echo $response;\r\n            } else if(strpos($requestContentType,\'text/html\') !== false){\r\n                $response = $this->encodeHtml($rawData);\r\n                echo $response;\r\n            } else if(strpos($requestContentType,\'application/xml\') !== false){\r\n                $response = $this->encodeXml($rawData);\r\n                echo $response;\r\n            }\r\n        }\r\n    }\r\n    ?>\r\n\r\n最后我们这样访问我们写的接口 \r\n\r\n    http://localhost/site/list/ \r\n    http://localhost/site/list/1/\r\n\r\n本文代码来自  [W3C 菜鸟教程][1]\r\n \r\n\r\n\r\n  [1]: http://www.runoob.com/php/php-restful.html',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,141),(43,'HTML5 APP----2014年H5没火，why？2016年H5能火，why？','@html5-app-why',1482896880,1483430622,'<!--markdown-->HTML5做跨平台的APP，在大多数人的脑子里没有什么好感，我身边的朋友也这么说。Anyway，我用完以后得出这样的结论：HTML5跨平台APP开发，在2015年以后会越来越火。\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n    在2014年以前，HTML5的性能和能力都不够充足。特别是性能，因为Android4.4以下版本不能支持webGL技术，所以大部分低端Android手机无法流畅运行手机APP。DCloud公司利用一款增强版的手机浏览器缓解了这个问题。同时，随着时代的进步，Android4.4以下版本将逐渐减少。\r\n\r\n1 2014年H5没火，WHY\r\n    \r\n    HTML5开发的APP在安卓4.4以下版本无法流畅运行，带来很差的用户体验。在目前iOS版本的手机则不存在这种问题。\r\n   究其原因，是Android4.4以下版本内置的webview版本太低，不支持webGL加速技术。近几年，HTML5开发APP无法普及，因为Android4.4以下版本市场占有率高企。但是，从2013开始，Android4.4以下版本正在逐步减少，这将对使用HTML5开发APP形成有利条件。\r\n![][1]\r\n\r\n\r\n\r\n    2015年11月，Android手机版本分布情况，数据来源：友盟指数\r\n    上图是Android手机在2015年11月份的版本分布，目前，在4.4以上（含4.4）版本已经有57.47%的占有率，而且，5.0以上版本的占有率（目前已有8.64%）有快速增加的趋势。未来，4.4以上（含4.4）版本将是Android市场的主流版本，这一事件正在发生。\r\n![][2]\r\n\r\n\r\n![图  2014-2015年，Android手机部分版本变换趋势][3]\r\n\r\n\r\n    上图是2014年-2015年间，Android手机部分版本的变化趋势。可以看出：4.4.4和4.4.2版本在快速扩张以后，目前增速放缓；4.4以下版本仍继续减少，并无停止迹象。同时，“其他”一类的占有率正在提高，并已超过4.4.2版本的占有率，有望赶上4.4.4版本的占有率。在“其他”的增长过程中，包含了4.4.4以上版本的快速增加，并且以5.0以上版本的持续增加为主。\r\n\r\n2 2015年H5会火，WHY\r\n\r\n      分析完Android版本分布，我认为：HTML5开发APP的前景十分好，以后Html5 APP将能自己适应目前的市场，不再有性能问题。\r\n    同时，对于iOS操作系统及iPhone手机，不必担心性能问题，iOS端本身对HTML5的支持就很好。\r\n    下图是2015年iOS手机的版本分布结果：\r\n![][4]\r\n\r\n\r\n3 先发制人\r\n\r\n    HTML5跨平台APP越来越火，工具也越来越多。我推荐一个开发平台（一款工具）----DCloud。\r\n![][5]\r\n\r\n\r\n  [1]: http://img.blog.csdn.net/20160225102439481?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\r\n  [2]: http://img.blog.csdn.net/20160225102910905?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\r\n  [3]: http://img.blog.csdn.net/20160225102951390?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\r\n  [4]: http://img.blog.csdn.net/20160225103827230?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\r\n  [5]: http://img.blog.csdn.net/20160225104304002?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\r\n      DCloud公司四款产品——HBuilder、HTML5+ Runtime、MUI、流应用。\r\n\r\n    HBuilder是一款前端开发工具，里面内置大量快捷键，飞速编码，一款不错的极客工具。\r\n    HTML5+ Runtime是一款手机浏览器，是依照DCloud公司的HTML5+标准实现的增强版浏览器，用于跨平台开发。该浏览器可以解析HTM5+ 规范的代码，跑在iOS和Android端，这样一套代码就可以在两个平台上运行。\r\n    MUI是一款前端框架，专门用于制作手机APP，功能和Android原生UI库、iOS原生UI库、jQuery Mobile、Zepto等框架类似。这是DCloud公司出品，用于和HTML5+ Runtime配套使用，可以使HTML5+ APP流畅跑在IOS和Android端手机上。MUI还是一款高大上的UI框架，其风格是模仿IOS 7界面风格的产品。\r\n    流应用是一种发行APP的方式，能让用户秒下、秒开手机APP，同时可以生产6个渠道的包【iOS ipa、Android apk、360流应用市场、百度直达号、H5浏览器、微信APP】。\r\n\r\n\r\n\r\n参考资料：HTML5 APP----DCloud产品分析及介绍',0,1,NULL,'post_draft','publish',NULL,0,'1','1','1',14,0),(56,'装在套子里的人','person',1486711200,1486711542,'<!--markdown-->法国思想家帕斯卡说“人只是一只芦苇，是宇宙间最脆弱的东西。但人是一只会思想的芦苇”。人的生命是脆弱的，宇宙间任何一件东西都能置人于死地，然而人却成了万物的主宰，这正是因为人有一颗会思想的灵魂，人因为思想而高贵。然而当人的思想被关在一个笼子里而失去了飞翔的自由时，人还是“人”吗？\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n别里科夫，现实生活让他总是感到心神不安，让他害怕，为了同世人隔绝，不致受到外界的影响，他总想给自己包上一层外壳，给自己制造一个所谓安全的套子：哪怕在艳阳天出门他也总是穿着套鞋，带着雨伞，他的雨伞、怀表、削铅笔的小折刀等等一切能包裹起来的东西都总是装在套子里，就连他的脸也好像装在套子里，因为他总是把脸藏在竖起的衣领里面，戴着黑眼镜，耳朵里塞上棉花，坐出租马车的时候也要车夫马上把车篷支起来。这仅仅是他抵挡恐惧的外在表现。另一方面，一切被禁止的东西都让他感到心里踏实、清楚明了，而对一切没有被政府明令禁止的事物他都觉得可疑、害怕。他的一句时时挂在嘴边的口头禅是：“千万别闹出什么乱子来。”在这部篇幅不算长的小说里这句话竟然以不同的方式出现了九次之多，简直就像咒语一样压得人喘不过气来。特别让人无法容忍的是，他总是像一个幽灵一样不请自到地造访每个教师的住所，一句话不说地坐上一两个钟头，然后又像幽灵一样地消失了。他的恐惧像毒瘤一样一点一点地蔓延，传染给他周围的每一个人。他在学校里待了15年，整个学校乃至全城被他这样的情绪控制了15年，竟然在这样漫长的时间里没有一个人想要反抗，想要对他说一个不字。全城的人什么都怕：不敢大声说话，不敢寄信、交朋友、读书，不敢周济穷人、教人识字，不敢吃荤、打牌，不敢搞任何娱乐活动，人们都像他一样蜷缩在自己的套子里苟且偷生。\r\n\r\n而最可怕的是，渐渐地，这一切都成为了习惯，成为了再自然不过的事情。别里科夫死了，死得非常具有戏剧性：学校里新来了一位史地教师，从乌克兰来的，与他一起来的还有他的姐姐华连卡，他们的到来如同一块石子一样把死水一潭的沉闷生活搅起了涟漪。小说中是这样形容她的：她简直就像蜜饯水果，活泼极了，很爱热闹，老是唱小俄罗斯的抒情歌曲，扬声大笑；她就像一个希腊神话中的爱神、美神一样从浪花里钻出来了；小俄罗斯女人只会哭或者笑，对她们来说不哭不笑的心情是没有的……这样的快乐甚至也感染了“套中人”别里科夫，在众人的怂恿下他甚至打算向华连卡求婚了，不过也仅仅是打算罢了：结婚以后要承担的义务和责任把他给吓住了，尤其让他害怕的是华连卡姐弟两人的思想方式和行为方式，他认为他们为人师表竟然骑着自行车穿街而过简直不成体统，以华连卡这样的活泼性情，说不定以后就会惹出什么麻烦来。于是他来到华连卡弟弟那里，告诉他这不应该那不应该，这不对那不对，最后被这个火暴脾气的弟弟揪着脖领子从楼梯上推了下去，而这恰巧被华连卡看到了。别里科夫又怕又羞，过了一个月就一命呜呼了。别里科夫就这样极具戏剧性地死去了。学校以及城里的人以为就此可以享受解脱的自由了，而悲哀的是，这种恐惧的情绪已经渗透到每一个人的血液中去了，好心情持续了还不到一个星期，生活又恢复了老样子，照先前一样，仍旧那么压抑、沉闷',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,141),(59,'Look and Say 序列','59',1487123400,1487125495,'<!--markdown-->    function lookandsay($s) {\r\n        $r = \'\';\r\n        $m = $s[0];\r\n        $n = 1;\r\n        for ($i = 1, $j = strlen($s); $i < $j; $i++) {\r\n            if($s[$i] == $m) {\r\n                $n++;\r\n            } else {\r\n                $r .= $n.$m;\r\n                $m = $s[$i];\r\n                $n = 1;\r\n            }\r\n        }\r\n        return $r.$n.$m;\r\n    }\r\n    \r\n    for ($i = 0, $s = 1; $i < 10; $i++) {\r\n        $s = lookandsay($s);\r\n        print(\"$s\\n\");\r\n    }\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n输出 ： 1 11 21 1211 111221 312211 13112221 1113213211 31131211131221 13211311123113112211    序列\r\n\r\n更多内容可以参考：[维基百科][1]\r\n\r\n\r\n  [1]: https://en.wikipedia.org/wiki/Look-and-say_sequence',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,201),(64,'PHP简单 对象(object) 与 数组(array) 的转换','64',1487319360,1487319417,'<!--markdown-->//数组转换对象\r\n\r\n    function array_to_object($arr) {\r\n    	if (gettype($arr) != \'array\') {\r\n    		return ;\r\n    	}\r\n    	foreach ($arr as $k => $v) {\r\n    		if (gettype($v) == \'array\' || gettype($v) == \'object\') {\r\n    			$arr[$k] = (object)array_to_object($v);\r\n    		}\r\n    	}\r\n    	return (object)$arr;\r\n    }\r\n    //对象转换数组\r\n    function object_to_array($obj) {\r\n    	$obj = (array)$obj;\r\n    	foreach ($obj as $k => $v) {\r\n    		if (gettype($v) == \'resource\') {\r\n    			return ;\r\n    		}\r\n    		if (gettype($v) == \'object\' || gettype($v) == \'array\') {\r\n    			$obj[$k] = (array)object_to_array($v);\r\n    		}\r\n    	}\r\n    	return $obj;\r\n    }\r\n    \r\n    $arr = [[\'zhangsan\',\'man\'], [\'lisi\',\'man\'], [\'lisa\',\'women\']];\r\n    var_dump(array_to_object($arr));\r\n    var_dump(object_to_array($arr));',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,159),(66,'PHP序列化数据存储在数据库中使用json还是serialize好','serialize-json',1488447600,1488447683,'<!--markdown-->1） 空间的比较\r\nserialize在编码后大概是json的1.5倍。\r\n原因：\r\nserialize后字符串包含了子串的长度，这可能是速度方面的优化，但是测试结果不尽人意。\r\nserialize有更加详细的类型区分，而json只有四种类型，并且是以简单的符号表示。\r\n2）速度的比较\r\n在较小数据的情况下， serialize比json快数量级。\r\n在大数据量的情况下，json比serialize稍微差一点\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n3）处理对象\r\njson无法处理对象方法等数据。\r\n4）使用范围\r\n在前后端交互一般都使用JSON，另外，目前JSON只支持UTF-8编码的数据。\r\n序列化使用serialize，特别是对象的存储。这是其存在的意义。\r\n与对象无关的数据存储可以使用json，如包含大量数字的数组等。',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,250),(69,'idea打包jar的多种方式','69',1492094640,1495867176,'<!--markdown-->idea打包jar的多种方式\r\n\r\n这里总结出用IDEA打包jar包的多种方式，以后的项目打包Jar包可以参考如下形式：\r\n\r\n用IDEA自带的打包形式\r\n用Maven插件maven-shade-plugin打包\r\n用Maven插件maven-assembly-plugin打包\r\n用IDEA自带的打包方式：\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n打开IDEA的file -> Project Structure，进入项目配置页面。如下图：\r\n![请输入图片描述][1]\r\n\r\n点击Artifacts，进入Artifacts配置页面，点击 + ，选择如下图的选项。\r\n![请输入图片描述][2]\r\n\r\n进入Create JAR from Modules页面，按照如下图配置。\r\n![请输入图片描述][3]\r\n\r\n第一步选择Main函数执行的类。\r\n第二步选择如图的选项，目的是对第三方Jar包打包时做额外的配置，如果不做额外的配置可不选这个选项（但不保证打包成功）\r\n第三步需要在src/main目录下，新建一个resources目录，将MANIFEST.MF文件保存在这里面，因为如果用默认缺省值的话，在IDEA12版本下会有bug。\r\n点击OK之后，出现如下图界面，右键点击<output root>，点击Create Directory,创建一个libs，将所有的第三方JAR放进libs目录下。\r\n![请输入图片描述][4]\r\n\r\n成功之后，如下图所示：\r\n![请输入图片描述][5]\r\n\r\n放入之后，点击我们要打成的jar的名字，这里面是kafka-cps.jar,选择classpath进行配置。\r\n![请输入图片描述][6]\r\n\r\n编辑的结果如下：\r\n![请输入图片描述][7]\r\n\r\n这里将所有的jar都写在libs/里面。点击OK，回到配置页面。\r\n同时还注意在配置页面，勾选build on make\r\n![请输入图片描述][8]\r\n\r\n最后点击配置页面的OK，完成配置。回到IDEA,点击Build->Build Artifacts，选择build\r\n![请输入图片描述][9]\r\n\r\n\r\n就会生成我们需要的jar包。其位置在项目目录的out目录下/out/artifacts/kafka_cps_jar。\r\n下面放一个正确配置的清单文件内容\r\n![请输入图片描述][10]\r\n\r\n\r\n用maven-shade-plugin打包\r\n\r\n上面的打包过程实在是过于的繁琐，而且也没有利用到maven管理项目的特色。为此，我们这里利用maven中的maven-shade-plugin插件。在pom.xml中，我们加入如下的信息来加入插件。\r\n\r\n    <plugin>\r\n                    <groupId>org.apache.maven.plugins</groupId>\r\n                    <artifactId>maven-shade-plugin</artifactId>\r\n                    <version>1.4</version>\r\n                    <configuration>\r\n                        <createDependencyReducedPom>true</createDependencyReducedPom>\r\n                    </configuration>\r\n                    <executions>\r\n                        <execution>\r\n                            <phase>package</phase>\r\n                            <goals>\r\n                                <goal>shade</goal>\r\n                            </goals>\r\n                            <configuration>\r\n                                <transformers>\r\n                                    <transformer\r\n                                            implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\r\n                                        <mainClass>Main.Main</mainClass>\r\n                                    </transformer>\r\n                                </transformers>\r\n                            </configuration>\r\n                        </execution>\r\n                    </executions>\r\n                </plugin>\r\n\r\n这里面配置了一个｀configuration｀标签内容，在此标签下面 有一个transformer标签，用来配置Main函数的入口( <mainClass>Main.Main</mainClass>)，当然此标签内容很复杂，不是上面写的那么简单，上面之所以如此简单，是因为在所有类中(包括第三方Jar)只有一个Main方法。如果第三方jar中有Main方法，就要进行额外的配置，上面这么配置，不一定能执行成功。\r\n\r\n具体可以参见maven插件。\r\n\r\n在加入这段代码到pom.xml之后，我们就可以用maven的命令去打包了。其指令如下：\r\n\r\nmvn clean compile //清除之前target编译文件并重新编译\r\nmvn clean package //对项目进行打包(因为配置过插件，所以jar包是可执行的)\r\nmvn clean install //安装项目，然后就可以使用了\r\n然后通过java -jar cps-1.0-SNAPSHOT.jar运行。\r\n\r\n如果使用IDEA的话，可以通过自带的maven管理工具代替执行上面的命令。如下图所示，依次点击蓝色的部分。\r\n![请输入图片描述][11]\r\n\r\n用maven-assembly-plugin打包\r\n\r\n上面的方法，我们还需要点击很多命令去打包。这次利用一个新的插件，可以打包更简单。同样，在pom.xml中加入如下代码。上文的maven-shade-plugin插件代码可以删除。最好不要写2个插件代码。\r\n\r\n     <plugin>\r\n                    <artifactId>maven-assembly-plugin</artifactId>\r\n                    <version>2.4</version>\r\n                    <configuration>\r\n                        <descriptorRefs>\r\n                            <descriptorRef>jar-with-dependencies</descriptorRef>\r\n                        </descriptorRefs>\r\n                        <archive>\r\n                            <manifest>\r\n                                <mainClass>Main.Main</mainClass>\r\n                            </manifest>\r\n                        </archive>\r\n                    </configuration>\r\n                    <executions>\r\n                        <execution>\r\n                            <id>make-assembly</id>\r\n                            <phase>package</phase>\r\n                            <goals>\r\n                                <goal>single</goal>\r\n                            </goals>\r\n                        </execution>\r\n                    </executions>\r\n                </plugin>\r\n\r\n这里同样配置了一个manifest标签来配置Main函数的入口。然后通过如下指令来实现打包。\r\n\r\nmvn assembly:assembly\r\n如果使用IDEA的话，可以通过自带的maven管理工具代替执行上面的命令。如下图所示，点击蓝色的部分。\r\n![请输入图片描述][12]\r\n\r\n\r\n然后通过执行java -jar cps-1.0-SNAPSHOT-jar-with-dependencies.jar运行。\r\n\r\n\r\n  [1]: http://ww1.sinaimg.cn/mw690/876975d1gy1fd44rhqnebj20cs09u3zb?_=6036870\r\n  [2]: http://ww1.sinaimg.cn/mw690/876975d1gy1fd44sbclg4j20r203q751?_=6036870\r\n  [3]: http://ww1.sinaimg.cn/mw690/876975d1gy1fd44u9q66lj20ry0h2q5h?_=6036870\r\n  [4]: http://images2015.cnblogs.com/blog/859903/201611/859903-20161106231227721-1478003438.jpg\r\n  [5]: http://images2015.cnblogs.com/blog/859903/201611/859903-20161106231236580-942760848.jpg\r\n  [6]: http://ww1.sinaimg.cn/mw690/876975d1gy1fd44uz58fhj20pc0kwta6?_=6036870\r\n  [7]: http://images2015.cnblogs.com/blog/859903/201611/859903-20161106231303283-1137200428.jpg\r\n  [8]: http://images2015.cnblogs.com/blog/859903/201611/859903-20161106231314018-1374718013.jpg\r\n  [9]: http://images2015.cnblogs.com/blog/859903/201611/859903-20161106231325736-1511593122.jpg\r\n  [10]: http://images2015.cnblogs.com/blog/859903/201611/859903-20161106231336815-1976168938.jpg\r\n  [11]: http://images2015.cnblogs.com/blog/859903/201611/859903-20161106231430096-1601918493.jpg\r\n  [12]: http://images2015.cnblogs.com/blog/859903/201611/859903-20161106231602674-150734166.jpg',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,153),(76,'我的 atom 开发工具','atom-php',1496825880,1498363846,'<!--markdown-->#### 不知不觉折腾 Atom 已经两个星期了，主要被他漂亮简介的主题所吸引，还有会震动的效果。\r\n\r\n#### 下面我详细介绍下我的 Atom 插件配置和说明\r\n\r\n    Community Packages (19) C:\\Users\\Slagga\\.atom\\packages\r\n    ├── activate-power-mode@2.0.0\r\n    ├── atom-autocomplete-php@0.25.6\r\n    ├── atom-beautify@0.29.26\r\n    ├── atom-file-types@0.5.5\r\n    ├── atom-goto-definition@1.3.3\r\n    ├── atom-php-cs-fixer@4.1.0\r\n    ├── atom-quick-highlight@0.10.0\r\n    ├── autocomplete-paths@1.0.5\r\n    ├── busy-signal@1.4.3\r\n    ├── emmet-atom@2.4.3\r\n    ├── file-type-icons@1.3.4\r\n    ├── goto@1.8.3\r\n    ├── intentions@1.1.2\r\n    ├── linter@2.1.4\r\n    ├── linter-php@1.3.2\r\n    ├── minimap@4.28.2\r\n    ├── minimap-find-and-replace@4.5.2\r\n    └── php-class-tree@1.0.0\r\n\r\n\r\n<!--more-->\r\n\r\n\r\n#### activate-power-mode 代码震动效果，六的一笔。\r\n![跳动的代码][1]\r\n#### atom-autocomplete-php PHP 代码自动补全。\r\n![代码自动补全][2]\r\n#### atom-beautify 漂亮的代码，用来格式化代码格式。\r\n![错乱的代码][3]\r\n![整齐的代码][4]\r\n#### atom-file-types 文档树中标记文件类型。\r\n\r\n#### atom-goto-definition 跳转到定义。\r\n![跳转到定义][5]\r\n#### atom-php-cs-fixer 格式化 PHP 代码。\r\n![整齐的代码][6]\r\n#### atom-quick-highlight 代码高亮。\r\n![代码高亮][7]\r\n#### busy-signal 忙碌的符号。\r\n![忙碌的符号][8]\r\n#### autocomplete-paths 自动补全地址路径。\r\n![自动补全地址][9]\r\n#### emmet-atom 这款插件是用来支持zend-coding，Emmet的前身是大名鼎鼎的Zen coding，如果你从事Web前端开发的话，对该插件一定不会陌生。它使用仿CSS选择器的语法来生成代码，大大提高了HTML/CSS代码编写的速度。\r\n\r\n#### file-type-icons 文件图标。\r\n![文件图标][10]\r\n#### intentions 用于显示Atom中的意图的基本包。\r\n![意图][11]\r\n#### linter 语法检查。\r\n![检查][12]\r\n#### linter-php PHP 语法语句错误检查。\r\n\r\n#### minimap 右侧 代码小地图。\r\n![小地图][13]\r\n#### minimap-find-and-replace 查找和替换小地图。\r\n![小地图][14]\r\n#### php-class-tree PHP 类的文档树。\r\n\r\n\r\n  [1]: https://cloud.githubusercontent.com/assets/688415/11615565/10f16456-9c65-11e5-8af4-265f01fc83a0.gif\r\n  [2]: https://camo.githubusercontent.com/773e168c34fe02222ebf158ab699564a96457dd5/687474703a2f2f692e696d6775722e636f6d2f685935797047322e706e67\r\n  [3]: https://cloud.githubusercontent.com/assets/1885333/16542727/db52adc6-408a-11e6-824e-04aed06bd2f7.png\r\n  [4]: https://cloud.githubusercontent.com/assets/1885333/16542728/dcac3700-408a-11e6-8e35-9c8fc4432edc.png\r\n  [5]: https://camo.githubusercontent.com/eda0a098e9fb8556ef623a9e2375e539dae82708/687474703a2f2f7777312e73696e61696d672e636e2f6c617267652f37316566343663316c7931666474387767626169716732307a69306a386864752e676966\r\n  [6]: https://camo.githubusercontent.com/f887f4e3dcfef8bfd8f5afc4b87358fb8879e935/68747470733a2f2f7261772e6769746875622e636f6d2f706665666665726c652f61746f6d2d7068702d63732d66697865722f6d61737465722f7068702d63732d66697865722e676966\r\n  [7]: https://raw.githubusercontent.com/t9md/t9md/f51b8e211e9ed8ed455053be52d5505da876b298/img/atom-quick-highlight.gif\r\n  [8]: https://cloud.githubusercontent.com/assets/4278113/22865536/0a123074-f188-11e6-8c6e-38574a6fe14c.gif\r\n  [9]: https://camo.githubusercontent.com/7da86dc3d22c9dd1d1c47bcb36237720fd987764/687474703a2f2f73312e64697265637475706c6f61642e6e65742f696d616765732f3134303431312f70356b76696665362e676966\r\n  [10]: https://raw.githubusercontent.com/lee-dohm/file-type-icons/master/file-type-icons.png\r\n  [11]: https://cloud.githubusercontent.com/assets/4278113/12488546/e73809ba-c08d-11e5-8038-dd222f3a815d.png\r\n  [12]: https://cloud.githubusercontent.com/assets/4278113/23879933/1ab17e2a-0872-11e7-803d-3fe0ccfc6790.gif\r\n  [13]: https://github.com/atom-minimap/minimap/raw/master/resources/screenshot.png?raw=true\r\n  [14]: https://github.com/atom-minimap/minimap-find-and-replace/raw/master/screenshot.png?raw=true',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,135),(75,'纯Java代码实现流星划过天空','java-meteor',1495867080,1522597335,'<!--markdown-->废话不多说了，直接给大家贴java代码了。\r\n\r\nimport java.awt.Color;\r\n  import java.awt.Graphics;\r\n  import java.awt.image.BufferedImage;\r\n  import javax.swing.JFrame;\r\n  import javax.swing.JPanel;\r\n  public class MeteorFly extends JFrame {\r\n   final int MAX = ; // (~)流星的个数\r\n   final int SLEEP = ; // 流星飞行的速度（数值越大，速度越慢）\r\n   final int COLORLV = ; // (~)色阶（可改变光晕大小）\r\n   final String COLOR = null; // (\"#\"~\"#ffffff\")光晕颜色（如果不填或null，则为默认颜色）\r\n   final int SIZE = ; // (~)流星大小\r\n   private MyPanel panel;\r\n   public MeteorFly() {\r\n   panel = new MyPanel();\r\n   this.getContentPane().add(panel);\r\n   this.setSize(, ); // 创建窗体\r\n   this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n   this.setVisible(true);\r\n   }\r\n   public static void main(String[] args) {\r\n   new MeteorFly();\r\n   }\r\n   class MyPanel extends JPanel implements Runnable {\r\n   Meteor p[];\r\n   int AppletWidth, AppletHeight;\r\n   BufferedImage OffScreen;\r\n   Graphics drawOffScreen;\r\n   Thread pThread;\r\n   public MyPanel() {\r\n     setBackground(Color.black); //窗体初始化\r\n     AppletWidth = ;\r\n     AppletHeight = ;\r\n     p = new Meteor[MAX];\r\n     for (int i = ; i < MAX; i++)\r\n     p[i] = new Meteor();\r\n     OffScreen = new BufferedImage(AppletWidth, AppletHeight,\r\n       BufferedImage.TYPE_INT_BGR);\r\n     drawOffScreen = OffScreen.getGraphics();\r\n     pThread = new Thread(this);\r\n     pThread.start();\r\n   }\r\n   @Override\r\n   public void paintComponent(Graphics g) {\r\n     // TODO Auto-generated method stub\r\n     super.paintComponents(g);\r\n     g.drawImage(OffScreen, , , this);\r\n   }\r\n   @Override\r\n   final public void run() {\r\n     while (true) {\r\n     // drawOffScreen.clearRect(, , AppletWidth, AppletHeight); //\r\n     // 清屏\r\n     for (int i = ; i < MAX; i++) {\r\n       drawOffScreen.setColor(p[i].color); // RGB颜色\r\n       drawOffScreen.fillOval(p[i].x, p[i].y, SIZE, SIZE);\r\n       p[i].x += p[i].mx;\r\n       p[i].y += p[i].my;\r\n       // if (p[i].x > AppletWidth || p[i].y > AppletHeight) {\r\n       // p[i].reset();\r\n       // }\r\n       int x = p[i].x;\r\n       int y = p[i].y;\r\n       int R = p[i].color.getRed(); // 提取颜色\r\n       int G = p[i].color.getGreen();\r\n       int B = p[i].color.getBlue();\r\n       while (true) {\r\n       if (R == && G == && B == ) {\r\n         break;\r\n       }\r\n       R -= COLORLV; // 尾部颜色淡化\r\n       if (R < ) {\r\n         R = ;\r\n       }\r\n       G -= COLORLV;\r\n       if (G < ) {\r\n         G = ;\r\n       }\r\n       B -= COLORLV;\r\n       if (B < ) {\r\n         B = ;\r\n       }\r\n       Color color = new Color(R, G, B);\r\n       x -= p[i].mx; // 覆盖尾部\r\n       y -= p[i].my;\r\n       drawOffScreen.setColor(color);\r\n       drawOffScreen.fillOval(x, y, SIZE, SIZE);\r\n       }\r\n       if (x > AppletWidth || y > AppletHeight) { // 流星飞出窗口，重置流星\r\n       p[i].reset();\r\n       }\r\n     }\r\n     repaint();\r\n     try {\r\n       Thread.sleep(SLEEP);\r\n     } catch (InterruptedException e) {\r\n       // TODO Auto-generated catch block\r\n       e.printStackTrace();\r\n     }\r\n     }\r\n   }\r\n   }\r\n   class Meteor { // 流星类\r\n   int x, y; // 流星的位置\r\n   int mx, my; // 下落速度\r\n   Color color; // 流星颜色\r\n   public Meteor() {\r\n     reset();\r\n   }\r\n   public void reset() {\r\n     int rand = (int) (Math.random() * ); //随机生成流星出现位置\r\n     if (rand > ) {\r\n     x = (int) (Math.random() * );\r\n     y = ;\r\n     } else {\r\n     y = (int) (Math.random() * );\r\n     x = ;\r\n     }\r\n     mx = (int) (Math.random() * + ); //随机生成下落速度和角度\r\n     my = (int) (Math.random() * + );\r\n     if (COLOR == null || COLOR.length() == ) {\r\n     color = new Color(\r\n       // 随机颜色\r\n       (new Double(Math.random() * )).intValue() + ,\r\n       (new Double(Math.random() * )).intValue() + ,\r\n       (new Double(Math.random() * )).intValue() + );\r\n     } else {\r\n     color = Color.decode(COLOR);\r\n     }\r\n   }\r\n   }\r\n }\r\n以上代码就是本文给大家讲述的纯Java代码实现流星划过天空，希望本文分享能够给大家带来意想不到的收获。',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,133),(80,'什么是脚本语言？','dynamic-lanages',1502631420,1502631722,'<!--markdown-->脚本语言又被称为扩建的语言，或者动态语言，是一种编程语言，用来控制软件应用程序，脚本通常以文本（如ASCII)保存，只在被调用时进行解释或编译。\r\n中文名 脚本语言 外文名 Scripting language 别    名 动态语言 类    别 编程语言\r\n\r\n\r\n概述定义\r\n脚本语言（Script languages,scripting programming languages,scripting languages）是为了缩短传统的编写-编译-链接-运行（edit-compile-link-run）过程而创建的计算机编程语言。此命名起源于一个脚本“screenplay”，每次运行都会使对话框逐字重复。早期的脚本语言经常被称为批处理语言或工作控制语言。一个脚本通常是解释运行而非编译。虽然许多脚本语言都超越了计算机简单任务自动化的领域，成熟到可以编写精巧的程序，但仍然还是被称为脚本。几乎所有计算机系统的各个层次都有一种脚本语言。包括操作系统层，如计算机游戏，网络应用程序，文字处理文档，网络软件等。在许多方面，高级编程语言和脚本语言之间互相交叉，二者之间没有明确的界限。一个脚本可以使得本来要用键盘进行的相互式操作自动化。一个Shell脚本主要由原本需要在命令行输入的命令组成，或在一个文本编辑器中，用户可以使用脚本来把一些常用的操作组合成一组序列。主要用来书写这种脚本的语言叫做脚本语言。很多脚本语言实际上已经超过简单的用户命令序列的指令，还可以编写更复杂的程序。\r\n简介\r\n脚本语言是为了缩短传统的编写-编译-链接-运行（edit-compile-link-run）过程而创建的计算机编程语言。  它的命名起源于一个脚本“screenplay”，每次运行都会使对话框逐字重复。早期的脚本语言经常被称为批量处理语言或工作控制语言。 \r\n一个脚本通常是解释执行而非编译。脚本语言通常都有简单、易学、易用的特性，目的就是希望能让程序员快速完成程序的编写工作。而宏语言则可视为脚本语言的分支，两者也有实质上的相同之处。 \r\n\r\n\r\n<!--more-->\r\n\r\n\r\n特点\r\n1、脚本语言(JavaScript，VBscript等)介于HTML和C,C++,Java,C#等编程语言之间。　HTML通常用于格式化和链接文本。而编程语言通常用于向机器发出一系列复杂的指令。\r\n2、脚本语言与编程语言也有很多相似地方，其函数与编程语言比较相像一些,其也涉及到变量。与编程语言之间最大的区别是编程语言的语法和规则更为严格和复杂一些.\r\n3、与程序代码的关系：脚本也是一种语言，其同样由程序代码组成。\r\n4、脚本语言是一种解释性的语言,例如Python、vbscript,javascript,installshield script,ActionScript等等,它不象c\\c++等可以编译成二进制代码,以可执行文件的形式存在，脚本语言不需要编译，可以直接用，由解释器来负责解释。\r\n5、脚本语言一般都是以文本形式存在,类似于一种命令。\r\n举个例子说：如果建立了一个程序,叫aaa.exe，可以打开.aa为扩展名的文件，为.aa文件的编写指定了一套规则(语法)，当别人编写了.aa文件后，自己的程序用这种规则来理解编写人的意图，并作出回应，那么，这一套规则就是脚本语言。\r\n6、相对于编译型计算机编程语言：用脚本语言开发的程序在执行时，由其所对应的解释器（或称虚拟机）解释执行。系统程序设计语言是被预先编译成机器语言而执行的。脚本语言的主要特征是：程序代码即是脚本程序，亦是最终可执行文件。脚本语言可分为独立型和嵌入型，独立型脚本语言在其执行时完全依赖于解释器，而嵌入型脚本语言通常在编程语言中（如C，C++，VB，Java等）被嵌入使用。\r\n7、和系统程序设计语言相比：不同是脚本语言是被解释而系统程序设计语言是被编译。被解释的语言由于没有编译时间而提供快速的转换，通过允许用户运行时编写应用程序，而不需要耗时的编译/打包过程。解释器使应用程序更加灵活，脚本语言的代码能够被实时生成和执行。脚本语言通常都有简单、易学、易用的特性，目的就是希望能让程序设计师快速完成程序的编写工作。\r\n\r\n\r\n\r\n优点\r\n快速开发：脚本语言极大地简化了“开发、部署、测试和调试”的周期过程。\r\n容易部署：大多数脚本语言都能够随时部署，而不需要耗时的编译/打包过程。\r\n同已有技术的集成：脚本语言被Java或者COM这样的组件技术所包围，因此能够有效地利用代码。\r\n易学易用：很多脚本语言的技术要求通常要低一些，因此能够更容易地找到大量合适的技术人员。\r\n动态代码：脚本语言的代码能够被实时生成和执行，这是一项高级特性，在某些应用程序里（例如JavaScript里的动态类型）是很有用也是必需的。\r\n缺点\r\n脚本语言不够全面：它们会要求一门“真正的”编程语言的存在，必须找一个数据库驱动程序将其内置进脚本语言里。\r\n脚本语言并不是软件工程和构建代码结构的最佳选择，例如面向对象和基于组件的开发。\r\n脚本语言通常不是“通用”语言，但是能够根据专门的应用来调整，例如：PHP。\r\n\r\n\r\n应用\r\n(1)：作为批次处理语言或工作控制语言。许多脚本语言用来执行一次性任务，尤其是系统管理方面。DOS，Windows的批处理文件和Unix的shell脚本都属于这种应用；\r\n(2)：作为通用的编程语言存在，如Perl、Python、Ruby等。由于“解释执行，内存管理，动态”等特性，它们仍被称为脚本语言。但它们已经用于应用程序编写，用户也不把它们看作脚本语言；\r\n(3)：许多大型的应用程序都包括根据用户需求而定制的惯用脚本语言。同样地，许多电脑游戏系统使用一种自定义脚本语言来表现NPC(Non-Player Character，Non-Playable Character，Non-Player Class)和游戏环境的预编程动作。此类语言通常是为一个单独的应用程序所设计，虽然它们貌似一些通用语言(如Quake C，Modeled After C)，但它们有自定义的功能；\r\n(4)：网页中的嵌入式脚本语言。熟知的HTML(Hyper Text Mark-up Language)即超文本标记语言，就是一种脚本语言，它的解释器就是浏览器。JavaScript直到现在仍然是网页浏览器内的主要编程语言，它的ECMAScript标准化保证了它成为流行的通用嵌入式脚本语言。另外，随着动态网页技术发展，ASP、JSP、PHP等嵌入网页的脚本语言正被广泛使用，不过这些脚本要通过Web Server解释,而Html则被浏览器执行；\r\n(5)：脚本语言在系统应用程序中嵌入使用，作为用户与系统的接口方式。在工业控制领域，PLC编程、组态软件的脚本语言是扩充组态系统功能的重要手段；在通信平台领域，IVR(自动语音应答)流程编程；Office办公软件，提供的宏和VBA；其他应用软件如ER Studio提供的Basic MacroEditor，用户可以编写Sax Basic脚本操作ER图，生成Access库、导出Word文档等扩展功能。[7] \r\n\r\n\r\n发展情况\r\n脚本技术得益于计算机硬件的加速发展。某些情况下甚至系统程序设计语言也不够有效，因此不得不用汇编编写应用程序。而今的机器比1980年的快100～500倍，且仍在以每18个月翻一番的速度增长。计算机性能快速提高，使计算机程序越来越复杂。因此，开发时间已远比运行时间紧迫。这时，脚本语言作为系统程序设计语言的补充，开始被主要的计算机平台所同时提供。编程语言已经由性能低下的硬件与执行效率之间的矛盾，转变为快速变化的市场需要与低效的开发工具之间的矛盾，所以脚本语言的发展在软件开发中有着必然的趋势。\r\n脚本语言分类编辑\r\n工作控制语言和shell\r\n\r\n\r\nShell 脚本\r\n此类脚本用于自动化工作控制，即启动和控制系统程序的行为。大多的脚本语言解释器也同时是命令行界面，如Unix shell和MS-DOS command。其他如AppleScript，可以为系统增加脚本环境，但没有命令行界面。\r\n具体分类有：\r\n1.4NT\r\n2.AppleScript\r\n3.ARexx(Amiga Rexx)\r\n4.bash\r\n5.csh\r\n6.DCL\r\n7.JCL\r\n8.ksh\r\n9.Cmd.exe batch(Windows,OS/2)\r\n10.command batch(DOS)\r\n11.REXX\r\n12.tcsh\r\n13.sh\r\n14.Winbatch\r\n15.Windows PowerShell\r\n16.Windows Script Host\r\n17.zsh\r\n\r\n\r\nGUI 脚本\r\nGUI出现带来一种专业的控制计算机的脚本语言。它在用户和图形界面，菜单，按钮等之间互动。它经常用来自动化重复性动作，或设置一个标准状态。理论上它可以用来控制运行于基于GUI的计算机上的所有应用程序，但实际上这些语言是否被支持还要看应用程序和操作系统本身。当通过键盘进行互动时，这些语言也被称为宏语言。\r\n具体分类有：\r\n1.AutoHotkey\r\n2.AutoIt\r\n3.Expect\r\n\r\n\r\n应用程序定制的脚本语言\r\n许多大型的应用程序都包括根据用户需求而定制的惯用脚本语言。同样地，许多电脑游戏系统使用一种自定义脚本语言来表现NPC(non-player character,non-playable character,non-player class)和游戏环境的预编程动作。\r\n此类语言通常是为一个单独的应用程序所设计，虽然它们貌似一些通用语言(如QuakeC, modeled after C)，但它们有自定义的功能。\r\n具体分类：\r\n1.Action Code Script\r\n2.ActionScript\r\n3.AutoLISP\r\n4.BlobbieScript\r\n5.Emacs Lisp\r\n6.Game Maker Language\r\n7.HyperTalk\r\n8.IPTSCRAE\r\n9.IRC script\r\n10.Lingo\r\n11.Matlab Embedded Language\r\n12.Maya Embedded Language\r\n13.mIRC script\r\n14.NWscript\r\n15.QuakeC\r\n16.UnrealScript\r\n17.Visual Basic for Applications\r\n18.VBScript\r\n19.ZZT-oop\r\n\r\n\r\nWEB编程脚本\r\n应用程序定制的脚本语言中有一种重要的类别，用于提供WEB页面的自定义功能。它专业处理互联网通信，使用网页浏览器作为用户界面。当然，大多现代WEB编程语言都比较强大可以做一些通用编程。\r\n具体分类：\r\n1.ColdFusion(Application Server)\r\n2.Lasso\r\n3.Miva\r\n4.SMX\r\n5.IPTSCRAE-一些网络开发团队用于创建论坛的工具\r\n\r\n\r\n文本处理语言\r\n处理基于文本的记录是脚本语言最早的用处之一。如Unix\'s awk最早是设计来帮助系统管理员处理调用UNIX基于文本的配置和LOG文件。Perl最早是用来产生报告的，现在它已经成了全面成熟的语言。\r\n具体分类：\r\n1.Awk\r\n2.Perl\r\n3.sed\r\n4.XSLT\r\n\r\n\r\n通用动态语言\r\n一些语言，比如Perl，从一门脚本语言发展成了更通用的编程语言。由于“解释执行，内存管理，动态”等特性，它们仍被称为脚本语言。但它们已经用于应用程序编写，用户也不把它们看作脚本语言。\r\n1.APL\r\n2.Dao\r\n3.Dylan\r\n4.Groovy\r\n5.Lua\r\n6.MUMPS(M)\r\n7.newLISP\r\n8.Nuva\r\n9.Perl\r\n10.PHP\r\n11.Python\r\n12.Ruby\r\n13.Scheme\r\n14.Smalltalk\r\n15.SuperCard\r\n16.Tcl(Tool command language)\r\n\r\n\r\n扩展/可嵌入语言\r\n少数的语言被设计通过嵌入应用程序来取代应用程序定制的脚本语言。开发者(如使用C等其它系统语言)包入使脚本语言可以控制应用程序的hook。这些语言和应用程序定制的脚本语言是同种用途，但优点在于可以在应用程序之间传递一些技能。\r\n具体分类：\r\n1.Ch(C/C++ interpreter)\r\n2.Dao\r\n3.ECMAScript亦称DMDScript,JavaScript,JScript\r\n4.GameMonkeyScript\r\n5.Guile\r\n6.ICI\r\n7.Lua\r\n8.RBScript(REALbasic Script)\r\n9.Squirrel\r\n10.Tcl\r\n11.Z-Script\r\nJavaScript直到现在仍然是网页浏览器内的主要编程语言，它的ECMAScript标准化保证了它成为流行的通用嵌入性语言。\r\nTcl作为一种扩展性语言而创建，但更多地被用作通用性语言，就如同Python, Perl, Ruby一样。\r\n\r\n\r\n其它\r\n1.BeanShell(scripting for Java)\r\n2.CobolScript\r\n3.Escapade (server side scripting)\r\n4.Euphoria\r\n5.F-Script\r\n6.Ferite\r\n7.Groovy\r\n8.Gui4Cli\r\n9.Io\r\n10.KiXtart\r\n11.Mondrian\r\n12.Object REXX\r\n13.Pike\r\n14.Pliant\r\n15.REBOL\r\n16.ScriptBasic\r\n17.Shorthand Language\r\n18.Simkin\r\n19.Sleep\r\n20.StepTalk\r\n21.Visual DialogScript\r\n\r\n\r\n常见的脚本语言编辑\r\nC Shell\r\nJavaScript\r\nNuva\r\nPerl\r\nPHP\r\nPython\r\nRuby\r\nTcl\r\nVBScript\r\nCSS',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,132),(82,'网站出现502 BAD GATEWAY的解决办法','nginx_502-1',1513918980,1513919025,'<!--markdown-->出现502 bad gateway错误的原因\r\n\r\n1.php-fpm进程数不够用\r\n2.Linux内核打开文件数量小\r\n3.脚本执行时间超时\r\n4.缓存设置比较小\r\n\r\n网站间歇性出现502，第一反应不是程序的问题，而是nginx服务器的问题，因为这是代理服务器出现的问题，代理服务器并没有安装php 排除第一中情况。\r\n\r\n于此想到的是可能是超时，所以我把超时修改了一些\r\n一下是服务器原配置(重点配置)\r\n\r\n\r\n<!--more-->\r\n\r\n\r\nhttp部分\r\n\r\nserver_names_hash_bucket_size 64;\r\nclient_header_buffer_size 128k;\r\nlarge_client_header_buffers 4 32k;\r\nclient_max_body_size 50m;\r\n\r\nkeepalive_timeout 60;\r\nfastcgi_connect_timeout 60;\r\nfastcgi_send_timeout 60;\r\nfastcgi_read_timeout 600;\r\nfastcgi_buffer_size 64k;\r\nfastcgi_buffers 4 128k;\r\nfastcgi_busy_buffers_size 128k;\r\nfastcgi_temp_file_write_size 256k;\r\n\r\ngzip_buffers 4 128k;\r\n\r\nserver部分\r\n\r\nupstream myweb {\r\nserver 10.10.10.1:80 max_fails=3 fail_timeout=30s;\r\nserver 10.10.10.2:80 max_fails=3 fail_timeout=30s;\r\nip_hash;\r\n}\r\n\r\nlocation / {\r\nproxy_pass http://myweb;\r\nproxy_next_upstream error timeout invalid_header http_500 http_502 http_503;\r\nproxy_set_header Host $host;\r\nproxy_set_header X-Real-IP $remote_addr;\r\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\nproxy_set_header X-Forwarded-Proto https;\r\nproxy_redirect off;\r\n}\r\n\r\n \r\n\r\n第一步修改超时 只改了http部分 缓冲基本上都加了几倍\r\n\r\nserver_names_hash_bucket_size 512;\r\nclient_header_buffer_size 512k;\r\nlarge_client_header_buffers 16 128k;\r\nclient_max_body_size 256m;\r\n\r\nkeepalive_timeout 600;\r\nfastcgi_connect_timeout 600;\r\nfastcgi_send_timeout 600;\r\nfastcgi_read_timeout 600;\r\nfastcgi_buffer_size 256k;\r\nfastcgi_buffers 16 512k;\r\nfastcgi_busy_buffers_size 512k;\r\nfastcgi_temp_file_write_size 1024k;\r\n\r\ngzip_buffers 16 512k;\r\n\r\n观察nginx出现502的频率并没有下降，还是和以前一样\r\n\r\n第二步修改server代理服务超时\r\n\r\nlocation / {\r\nproxy_pass http://myweb;\r\nproxy_next_upstream error timeout invalid_header http_500 http_502 http_503;\r\nproxy_set_header Host $host;\r\nproxy_set_header X-Real-IP $remote_addr;\r\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\nproxy_set_header X-Forwarded-Proto https;\r\nproxy_redirect off;\r\n\r\nproxy_connect_timeout 300s;\r\nproxy_send_timeout 300s;\r\nproxy_read_timeout 300s;\r\n\r\n}\r\n\r\n观察nginx502的频率有一点下降，没有达到预期效果于是更改代理的缓冲区\r\n\r\nlocation / {\r\nproxy_pass http://myweb;\r\nproxy_next_upstream error timeout invalid_header http_500 http_502 http_503;\r\nproxy_set_header Host $host;\r\nproxy_set_header X-Real-IP $remote_addr;\r\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\nproxy_set_header X-Forwarded-Proto http;\r\nproxy_redirect off;\r\nproxy_connect_timeout 300s;\r\nproxy_send_timeout 300s;\r\nproxy_read_timeout 300s;\r\nproxy_buffer_size 512k;\r\nproxy_buffers 32 512k;\r\nproxy_busy_buffers_size 512k;\r\nproxy_temp_file_write_size 512k;\r\nproxy_ignore_client_abort on;\r\n\r\n}\r\n\r\n观察nginx502的频率和刚才一样，并没有明显效果。打开nginx的错误日志，观察错误状态，nginx错误日志显示\r\n\r\n[error] 20435#0: *3890606 no live upstreams while connecting to upstream, client:\r\n\r\n意思是nginx发现没有存活的后端了，后端有两台服务器，这怎么可能\r\n\r\n猜想nginx在等待后端服务器返回的时候做了判断，如果后端服务器响应慢就有可能踢掉后端服务器，因此就可能把后端的两台服务器都踢掉\r\n\r\n所以问题是出在 upstream 配置，原来配置中的max_fails=3 fail_timeout=30s;是默认的配置\r\n\r\n我尝试修改 max_fails=10 fail_timeout=60s; 观察nginx出现502的频率下降了很多，但是如果出现502就时间比较久。以下是upstream最终配置\r\n\r\nupstream myweb {\r\nserver 10.10.10.1:80 max_fails=60 fail_timeout=10s;\r\nserver 10.10.10.2:80 max_fails=60 fail_timeout=10s;\r\nip_hash;\r\n}\r\n\r\n接下来可能的优化 调高调高linux内核打开文件数量备注一下\r\n\r\necho ‘ulimit -HSn 65536′ >> /etc/profile\r\necho ‘ulimit -HSn 65536′ >> /etc/rc.local\r\nsource /etc/profile',0,1,NULL,'post','publish',NULL,0,'1','1','1',0,49);
/*!40000 ALTER TABLE `www_contents` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `www_fields`
--

DROP TABLE IF EXISTS `www_fields`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `www_fields` (
  `cid` int(10) unsigned NOT NULL,
  `name` varchar(200) NOT NULL,
  `type` varchar(8) DEFAULT 'str',
  `str_value` text,
  `int_value` int(10) DEFAULT '0',
  `float_value` float DEFAULT '0',
  PRIMARY KEY (`cid`,`name`),
  KEY `int_value` (`int_value`),
  KEY `float_value` (`float_value`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `www_fields`
--

LOCK TABLES `www_fields` WRITE;
/*!40000 ALTER TABLE `www_fields` DISABLE KEYS */;
/*!40000 ALTER TABLE `www_fields` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `www_metas`
--

DROP TABLE IF EXISTS `www_metas`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `www_metas` (
  `mid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `slug` varchar(200) DEFAULT NULL,
  `type` varchar(32) NOT NULL,
  `description` varchar(200) DEFAULT NULL,
  `count` int(10) unsigned DEFAULT '0',
  `order` int(10) unsigned DEFAULT '0',
  `parent` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`mid`),
  KEY `slug` (`slug`)
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `www_metas`
--

LOCK TABLES `www_metas` WRITE;
/*!40000 ALTER TABLE `www_metas` DISABLE KEYS */;
INSERT INTO `www_metas` VALUES (3,'后端','back','category','分类 后端 下的文章',12,3,0),(2,'前端','front','category','分类 前端 下的文章',1,2,0),(4,'服务器','server','category','分类 服务器 下的文章',4,4,0),(5,'段子','salt','category','分类 段子 下的文章',3,5,0);
/*!40000 ALTER TABLE `www_metas` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `www_options`
--

DROP TABLE IF EXISTS `www_options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `www_options` (
  `name` varchar(32) NOT NULL,
  `user` int(10) unsigned NOT NULL DEFAULT '0',
  `value` text,
  PRIMARY KEY (`name`,`user`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `www_options`
--

LOCK TABLES `www_options` WRITE;
/*!40000 ALTER TABLE `www_options` DISABLE KEYS */;
INSERT INTO `www_options` VALUES ('theme',0,'default'),('theme:default',0,'a:2:{s:7:\"logoUrl\";N;s:12:\"sidebarBlock\";a:5:{i:0;s:15:\"ShowRecentPosts\";i:1;s:18:\"ShowRecentComments\";i:2;s:12:\"ShowCategory\";i:3;s:11:\"ShowArchive\";i:4;s:9:\"ShowOther\";}}'),('timezone',0,'28800'),('lang',0,NULL),('charset',0,'UTF-8'),('contentType',0,'text/html'),('gzip',0,'0'),('generator',0,'Typecho 1.0/14.10.10'),('title',0,'春风得意'),('description',0,'人啊，只有清心寡欲才能高枕无忧。'),('keywords',0,'typecho,php,blog'),('rewrite',0,'1'),('frontPage',0,'recent'),('frontArchive',0,'0'),('commentsRequireMail',0,'1'),('commentsWhitelist',0,'0'),('commentsRequireURL',0,'0'),('commentsRequireModeration',0,'0'),('plugins',0,'a:2:{s:9:\"activated\";a:1:{s:5:\"Views\";a:1:{s:7:\"handles\";a:1:{s:27:\"Widget_Archive:beforeRender\";a:1:{i:0;a:2:{i:0;s:12:\"Views_Plugin\";i:1;s:12:\"viewsCounter\";}}}}}s:7:\"handles\";a:1:{s:27:\"Widget_Archive:beforeRender\";a:1:{i:0;a:2:{i:0;s:12:\"Views_Plugin\";i:1;s:12:\"viewsCounter\";}}}}'),('commentDateFormat',0,'F jS, Y \\a\\t h:i a'),('siteUrl',0,'http://slagga.top'),('defaultCategory',0,'1'),('allowRegister',0,'0'),('defaultAllowComment',0,'1'),('defaultAllowPing',0,'1'),('defaultAllowFeed',0,'1'),('pageSize',0,'5'),('postsListSize',0,'10'),('commentsListSize',0,'10'),('commentsHTMLTagAllowed',0,NULL),('postDateFormat',0,'Y-m-d'),('feedFullText',0,'0'),('editorSize',0,'350'),('autoSave',0,'0'),('markdown',0,'1'),('commentsMaxNestingLevels',0,'5'),('commentsPostTimeout',0,'2592000'),('commentsUrlNofollow',0,'1'),('commentsShowUrl',0,'1'),('commentsMarkdown',0,'0'),('commentsPageBreak',0,'0'),('commentsThreaded',0,'1'),('commentsPageSize',0,'20'),('commentsPageDisplay',0,'last'),('commentsOrder',0,'ASC'),('commentsCheckReferer',0,'1'),('commentsAutoClose',0,'0'),('commentsPostIntervalEnable',0,'1'),('commentsPostInterval',0,'60'),('commentsShowCommentOnly',0,'0'),('commentsAvatar',0,'1'),('commentsAvatarRating',0,'G'),('commentsAntiSpam',0,'1'),('routingTable',0,'a:26:{i:0;a:25:{s:5:\"index\";a:6:{s:3:\"url\";s:1:\"/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:8:\"|^[/]?$|\";s:6:\"format\";s:1:\"/\";s:6:\"params\";a:0:{}}s:7:\"archive\";a:6:{s:3:\"url\";s:6:\"/blog/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:13:\"|^/blog[/]?$|\";s:6:\"format\";s:6:\"/blog/\";s:6:\"params\";a:0:{}}s:2:\"do\";a:6:{s:3:\"url\";s:22:\"/action/[action:alpha]\";s:6:\"widget\";s:9:\"Widget_Do\";s:6:\"action\";s:6:\"action\";s:4:\"regx\";s:32:\"|^/action/([_0-9a-zA-Z-]+)[/]?$|\";s:6:\"format\";s:10:\"/action/%s\";s:6:\"params\";a:1:{i:0;s:6:\"action\";}}s:4:\"post\";a:6:{s:3:\"url\";s:21:\"/archives/[slug].html\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:31:\"|^/archives/([^/]+)\\.html[/]?$|\";s:6:\"format\";s:17:\"/archives/%s.html\";s:6:\"params\";a:1:{i:0;s:4:\"slug\";}}s:10:\"attachment\";a:6:{s:3:\"url\";s:26:\"/attachment/[cid:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:28:\"|^/attachment/([0-9]+)[/]?$|\";s:6:\"format\";s:15:\"/attachment/%s/\";s:6:\"params\";a:1:{i:0;s:3:\"cid\";}}s:8:\"category\";a:6:{s:3:\"url\";s:17:\"/category/[slug]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:25:\"|^/category/([^/]+)[/]?$|\";s:6:\"format\";s:13:\"/category/%s/\";s:6:\"params\";a:1:{i:0;s:4:\"slug\";}}s:3:\"tag\";a:6:{s:3:\"url\";s:12:\"/tag/[slug]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:20:\"|^/tag/([^/]+)[/]?$|\";s:6:\"format\";s:8:\"/tag/%s/\";s:6:\"params\";a:1:{i:0;s:4:\"slug\";}}s:6:\"author\";a:6:{s:3:\"url\";s:22:\"/author/[uid:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:24:\"|^/author/([0-9]+)[/]?$|\";s:6:\"format\";s:11:\"/author/%s/\";s:6:\"params\";a:1:{i:0;s:3:\"uid\";}}s:6:\"search\";a:6:{s:3:\"url\";s:19:\"/search/[keywords]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:23:\"|^/search/([^/]+)[/]?$|\";s:6:\"format\";s:11:\"/search/%s/\";s:6:\"params\";a:1:{i:0;s:8:\"keywords\";}}s:10:\"index_page\";a:6:{s:3:\"url\";s:21:\"/page/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:22:\"|^/page/([0-9]+)[/]?$|\";s:6:\"format\";s:9:\"/page/%s/\";s:6:\"params\";a:1:{i:0;s:4:\"page\";}}s:12:\"archive_page\";a:6:{s:3:\"url\";s:26:\"/blog/page/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:27:\"|^/blog/page/([0-9]+)[/]?$|\";s:6:\"format\";s:14:\"/blog/page/%s/\";s:6:\"params\";a:1:{i:0;s:4:\"page\";}}s:13:\"category_page\";a:6:{s:3:\"url\";s:32:\"/category/[slug]/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:34:\"|^/category/([^/]+)/([0-9]+)[/]?$|\";s:6:\"format\";s:16:\"/category/%s/%s/\";s:6:\"params\";a:2:{i:0;s:4:\"slug\";i:1;s:4:\"page\";}}s:8:\"tag_page\";a:6:{s:3:\"url\";s:27:\"/tag/[slug]/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:29:\"|^/tag/([^/]+)/([0-9]+)[/]?$|\";s:6:\"format\";s:11:\"/tag/%s/%s/\";s:6:\"params\";a:2:{i:0;s:4:\"slug\";i:1;s:4:\"page\";}}s:11:\"author_page\";a:6:{s:3:\"url\";s:37:\"/author/[uid:digital]/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:33:\"|^/author/([0-9]+)/([0-9]+)[/]?$|\";s:6:\"format\";s:14:\"/author/%s/%s/\";s:6:\"params\";a:2:{i:0;s:3:\"uid\";i:1;s:4:\"page\";}}s:11:\"search_page\";a:6:{s:3:\"url\";s:34:\"/search/[keywords]/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:32:\"|^/search/([^/]+)/([0-9]+)[/]?$|\";s:6:\"format\";s:14:\"/search/%s/%s/\";s:6:\"params\";a:2:{i:0;s:8:\"keywords\";i:1;s:4:\"page\";}}s:12:\"archive_year\";a:6:{s:3:\"url\";s:18:\"/[year:digital:4]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:19:\"|^/([0-9]{4})[/]?$|\";s:6:\"format\";s:4:\"/%s/\";s:6:\"params\";a:1:{i:0;s:4:\"year\";}}s:13:\"archive_month\";a:6:{s:3:\"url\";s:36:\"/[year:digital:4]/[month:digital:2]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:30:\"|^/([0-9]{4})/([0-9]{2})[/]?$|\";s:6:\"format\";s:7:\"/%s/%s/\";s:6:\"params\";a:2:{i:0;s:4:\"year\";i:1;s:5:\"month\";}}s:11:\"archive_day\";a:6:{s:3:\"url\";s:52:\"/[year:digital:4]/[month:digital:2]/[day:digital:2]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:41:\"|^/([0-9]{4})/([0-9]{2})/([0-9]{2})[/]?$|\";s:6:\"format\";s:10:\"/%s/%s/%s/\";s:6:\"params\";a:3:{i:0;s:4:\"year\";i:1;s:5:\"month\";i:2;s:3:\"day\";}}s:17:\"archive_year_page\";a:6:{s:3:\"url\";s:38:\"/[year:digital:4]/page/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:33:\"|^/([0-9]{4})/page/([0-9]+)[/]?$|\";s:6:\"format\";s:12:\"/%s/page/%s/\";s:6:\"params\";a:2:{i:0;s:4:\"year\";i:1;s:4:\"page\";}}s:18:\"archive_month_page\";a:6:{s:3:\"url\";s:56:\"/[year:digital:4]/[month:digital:2]/page/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:44:\"|^/([0-9]{4})/([0-9]{2})/page/([0-9]+)[/]?$|\";s:6:\"format\";s:15:\"/%s/%s/page/%s/\";s:6:\"params\";a:3:{i:0;s:4:\"year\";i:1;s:5:\"month\";i:2;s:4:\"page\";}}s:16:\"archive_day_page\";a:6:{s:3:\"url\";s:72:\"/[year:digital:4]/[month:digital:2]/[day:digital:2]/page/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:55:\"|^/([0-9]{4})/([0-9]{2})/([0-9]{2})/page/([0-9]+)[/]?$|\";s:6:\"format\";s:18:\"/%s/%s/%s/page/%s/\";s:6:\"params\";a:4:{i:0;s:4:\"year\";i:1;s:5:\"month\";i:2;s:3:\"day\";i:3;s:4:\"page\";}}s:12:\"comment_page\";a:6:{s:3:\"url\";s:53:\"[permalink:string]/comment-page-[commentPage:digital]\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:36:\"|^(.+)/comment\\-page\\-([0-9]+)[/]?$|\";s:6:\"format\";s:18:\"%s/comment-page-%s\";s:6:\"params\";a:2:{i:0;s:9:\"permalink\";i:1;s:11:\"commentPage\";}}s:4:\"feed\";a:6:{s:3:\"url\";s:20:\"/feed[feed:string:0]\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:4:\"feed\";s:4:\"regx\";s:17:\"|^/feed(.*)[/]?$|\";s:6:\"format\";s:7:\"/feed%s\";s:6:\"params\";a:1:{i:0;s:4:\"feed\";}}s:8:\"feedback\";a:6:{s:3:\"url\";s:31:\"[permalink:string]/[type:alpha]\";s:6:\"widget\";s:15:\"Widget_Feedback\";s:6:\"action\";s:6:\"action\";s:4:\"regx\";s:29:\"|^(.+)/([_0-9a-zA-Z-]+)[/]?$|\";s:6:\"format\";s:5:\"%s/%s\";s:6:\"params\";a:2:{i:0;s:9:\"permalink\";i:1;s:4:\"type\";}}s:4:\"page\";a:6:{s:3:\"url\";s:12:\"/[slug].html\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";s:4:\"regx\";s:22:\"|^/([^/]+)\\.html[/]?$|\";s:6:\"format\";s:8:\"/%s.html\";s:6:\"params\";a:1:{i:0;s:4:\"slug\";}}}s:5:\"index\";a:3:{s:3:\"url\";s:1:\"/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:7:\"archive\";a:3:{s:3:\"url\";s:6:\"/blog/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:2:\"do\";a:3:{s:3:\"url\";s:22:\"/action/[action:alpha]\";s:6:\"widget\";s:9:\"Widget_Do\";s:6:\"action\";s:6:\"action\";}s:4:\"post\";a:3:{s:3:\"url\";s:21:\"/archives/[slug].html\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:10:\"attachment\";a:3:{s:3:\"url\";s:26:\"/attachment/[cid:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:8:\"category\";a:3:{s:3:\"url\";s:17:\"/category/[slug]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:3:\"tag\";a:3:{s:3:\"url\";s:12:\"/tag/[slug]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:6:\"author\";a:3:{s:3:\"url\";s:22:\"/author/[uid:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:6:\"search\";a:3:{s:3:\"url\";s:19:\"/search/[keywords]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:10:\"index_page\";a:3:{s:3:\"url\";s:21:\"/page/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:12:\"archive_page\";a:3:{s:3:\"url\";s:26:\"/blog/page/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:13:\"category_page\";a:3:{s:3:\"url\";s:32:\"/category/[slug]/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:8:\"tag_page\";a:3:{s:3:\"url\";s:27:\"/tag/[slug]/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:11:\"author_page\";a:3:{s:3:\"url\";s:37:\"/author/[uid:digital]/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:11:\"search_page\";a:3:{s:3:\"url\";s:34:\"/search/[keywords]/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:12:\"archive_year\";a:3:{s:3:\"url\";s:18:\"/[year:digital:4]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:13:\"archive_month\";a:3:{s:3:\"url\";s:36:\"/[year:digital:4]/[month:digital:2]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:11:\"archive_day\";a:3:{s:3:\"url\";s:52:\"/[year:digital:4]/[month:digital:2]/[day:digital:2]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:17:\"archive_year_page\";a:3:{s:3:\"url\";s:38:\"/[year:digital:4]/page/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:18:\"archive_month_page\";a:3:{s:3:\"url\";s:56:\"/[year:digital:4]/[month:digital:2]/page/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:16:\"archive_day_page\";a:3:{s:3:\"url\";s:72:\"/[year:digital:4]/[month:digital:2]/[day:digital:2]/page/[page:digital]/\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:12:\"comment_page\";a:3:{s:3:\"url\";s:53:\"[permalink:string]/comment-page-[commentPage:digital]\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}s:4:\"feed\";a:3:{s:3:\"url\";s:20:\"/feed[feed:string:0]\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:4:\"feed\";}s:8:\"feedback\";a:3:{s:3:\"url\";s:31:\"[permalink:string]/[type:alpha]\";s:6:\"widget\";s:15:\"Widget_Feedback\";s:6:\"action\";s:6:\"action\";}s:4:\"page\";a:3:{s:3:\"url\";s:12:\"/[slug].html\";s:6:\"widget\";s:14:\"Widget_Archive\";s:6:\"action\";s:6:\"render\";}}'),('actionTable',0,'a:0:{}'),('panelTable',0,'a:0:{}'),('attachmentTypes',0,'@image@'),('secret',0,'2hL%T3z$R6xUU3$x@d#vE9JySmT1XTFF'),('autoSave',1,'1'),('markdown',1,'1'),('defaultAllowComment',1,'1'),('defaultAllowPing',1,'1'),('defaultAllowFeed',1,'1'),('editorSize',1,'620');
/*!40000 ALTER TABLE `www_options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `www_relationships`
--

DROP TABLE IF EXISTS `www_relationships`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `www_relationships` (
  `cid` int(10) unsigned NOT NULL,
  `mid` int(10) unsigned NOT NULL,
  PRIMARY KEY (`cid`,`mid`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `www_relationships`
--

LOCK TABLES `www_relationships` WRITE;
/*!40000 ALTER TABLE `www_relationships` DISABLE KEYS */;
INSERT INTO `www_relationships` VALUES (14,2),(22,5),(23,4),(25,3),(26,3),(27,4),(30,5),(32,3),(43,2),(49,3),(52,3),(56,5),(59,3),(64,3),(66,3),(69,4),(75,3),(76,3),(80,3),(82,3),(82,4);
/*!40000 ALTER TABLE `www_relationships` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `www_users`
--

DROP TABLE IF EXISTS `www_users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `www_users` (
  `uid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(32) DEFAULT NULL,
  `password` varchar(64) DEFAULT NULL,
  `mail` varchar(200) DEFAULT NULL,
  `url` varchar(200) DEFAULT NULL,
  `screenName` varchar(32) DEFAULT NULL,
  `created` int(10) unsigned DEFAULT '0',
  `activated` int(10) unsigned DEFAULT '0',
  `logged` int(10) unsigned DEFAULT '0',
  `group` varchar(16) DEFAULT 'visitor',
  `authCode` varchar(64) DEFAULT NULL,
  PRIMARY KEY (`uid`),
  UNIQUE KEY `name` (`name`),
  UNIQUE KEY `mail` (`mail`)
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `www_users`
--

LOCK TABLES `www_users` WRITE;
/*!40000 ALTER TABLE `www_users` DISABLE KEYS */;
INSERT INTO `www_users` VALUES (1,'slagga','$P$Bcs3/OT0sEtve/0UjOt/CPfuzUYcpp1','slagga@126.com','http://slagga.top','slagga',1482752079,1522597339,1522490953,'administrator','05e604b8b697e04c300ddc951c10b760');
/*!40000 ALTER TABLE `www_users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-04-01 23:44:26
